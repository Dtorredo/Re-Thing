{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"backend-impl.js","sourceRoot":"","sources":["../../lib/backend-impl.ts"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"file":"backend.js","sourceRoot":"","sources":["../../lib/backend.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"file":"version.js","sourceRoot":"","sources":["../../lib/version.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC,0DAA0D;AAC1D,uCAAuC;;;;AAEhC,MAAM,OAAO,GAAG,gCAAgC,CAAC","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"file":"env-impl.js","sourceRoot":"","sources":["../../lib/env-impl.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;;;AAGlC,OAAO,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;;AAIvC,IAAI,aAAa,GAA2B,SAAS,CAAC;AAE/C,MAAM,GAAG,GAAQ;IACtB,IAAI,EAAE,CAAA,CAA0B;IAChC,KAAK,EAAE,CAAA,CAAoB;IAC3B,MAAM,EAAE,CAAA,CAAqB;IAC7B,QAAQ,EAAE;QAAE,MAAM,sQAAE,UAAO;IAAA,CAAE;IAE7B,IAAI,QAAQ,EAAC,KAAmB,CAAA;QAC9B,IAAI,KAAK,KAAK,SAAS,EAAE;YACvB,OAAO;SACR;QACD,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI;YAAC,SAAS;YAAE,MAAM;YAAE,SAAS;YAAE,OAAO;YAAE,OAAO;SAAC,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;YACvG,MAAM,IAAI,KAAK,CAAC,CAAA,2BAAA,EAA8B,KAAK,EAAE,CAAC,CAAC;SACxD;QACD,aAAa,GAAG,KAAK,CAAC;IACxB,CAAC;IACD,IAAI,QAAQ,IAAA;QACV,OAAO,aAAa,CAAC;IACvB,CAAC;CACF,CAAC;AAEF,kGAAkG;AAClG,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,UAAU,EAAE;IAAE,UAAU,EAAE,IAAI;AAAA,CAAE,CAAC,CAAC","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"file":"env.js","sourceRoot":"","sources":["../../lib/env.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;;;AAElC,OAAO,EAAE,GAAG,IAAI,OAAO,EAAE,MAAM,eAAe,CAAC;;AAgSxC,MAAM,GAAG,2QAAQ,MAAO,CAAC","debugId":null}},
    {"offset": {"line": 229, "column": 0}, "map": {"version":3,"file":"tensor-conversion-impl.js","sourceRoot":"","sources":["../../lib/tensor-conversion-impl.ts"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"file":"tensor-factory-impl.js","sourceRoot":"","sources":["../../lib/tensor-factory-impl.ts"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 770, "column": 0}, "map": {"version":3,"file":"tensor-impl-type-mapping.js","sourceRoot":"","sources":["../../lib/tensor-impl-type-mapping.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAkBlC,kGAAkG;;;;;;AAC3F,MAAM,qCAAqC,GAAG,IAAI,GAAG,CAA0C;IACpG;QAAC,SAAS;QAAE,YAAY;KAAC;IACzB;QAAC,OAAO;QAAE,UAAU;KAAC;IACrB;QAAC,MAAM;QAAE,SAAS;KAAC;IACnB;QAAC,QAAQ;QAAE,WAAW;KAAC;IACvB;QAAC,OAAO;QAAE,UAAU;KAAC;IACrB;QAAC,OAAO;QAAE,UAAU;KAAC;IACrB;QAAC,MAAM;QAAE,UAAU;KAAC;IACpB;QAAC,SAAS;QAAE,YAAY;KAAC;IACzB;QAAC,QAAQ;QAAE,WAAW;KAAC;IACvB;QAAC,MAAM;QAAE,UAAU;KAAC;IACpB;QAAC,OAAO;QAAE,UAAU;KAAC;CACtB,CAAC,CAAC;AAGI,MAAM,qCAAqC,GAAG,IAAI,GAAG,CAA+C;IACzG;QAAC,YAAY;QAAE,SAAS;KAAC;IACzB;QAAC,UAAU;QAAE,OAAO;KAAC;IACrB;QAAC,SAAS;QAAE,MAAM;KAAC;IACnB;QAAC,WAAW;QAAE,QAAQ;KAAC;IACvB;QAAC,UAAU;QAAE,OAAO;KAAC;IACrB;QAAC,UAAU;QAAE,OAAO;KAAC;IACrB;QAAC,YAAY;QAAE,SAAS;KAAC;IACzB;QAAC,WAAW;QAAE,QAAQ;KAAC;CACxB,CAAC,CAAC;AAQH,oHAAoH;AACpH,oHAAoH;AACpH,yBAAyB;AACzB,IAAI,mBAAmB,GAAG,KAAK,CAAC;AACzB,MAAM,eAAe,GAAG,GAAG,EAAE;IAClC,IAAI,CAAC,mBAAmB,EAAE;QACxB,mBAAmB,GAAG,IAAI,CAAC;QAC3B,MAAM,wBAAwB,GAAG,OAAO,aAAa,KAAK,WAAW,IAAI,aAAa,CAAC,IAAI,CAAC;QAC5F,MAAM,yBAAyB,GAAG,OAAO,cAAc,KAAK,WAAW,IAAI,cAAc,CAAC,IAAI,CAAC;QAC/F,MAAM,uBAAuB,GAAG,OAAO,YAAY,KAAK,WAAW,IAAI,YAAY,CAAC,IAAI,CAAC;QAEzF,IAAI,wBAAwB,EAAE;YAC5B,qCAAqC,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;YAClE,qCAAqC,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;SACnE;QACD,IAAI,yBAAyB,EAAE;YAC7B,qCAAqC,CAAC,GAAG,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;YACpE,qCAAqC,CAAC,GAAG,CAAC,cAAc,EAAE,QAAQ,CAAC,CAAC;SACrE;QACD,IAAI,uBAAuB,EAAE;YAC3B,qCAAqC,CAAC,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;YACnE,qCAAqC,CAAC,GAAG,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC;SACpE,MAAM;YACL,yEAAyE;YACzE,qCAAqC,CAAC,GAAG,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;SACnE;KACF;AACH,CAAC,CAAC","debugId":null}},
    {"offset": {"line": 891, "column": 0}, "map": {"version":3,"file":"tensor-utils-impl.js","sourceRoot":"","sources":["../../lib/tensor-utils-impl.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;;;;AAQlC,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;;AAOnC,MAAM,aAAa,GAAG,CAAC,IAAwB,EAAU,EAAE;IAChE,IAAI,IAAI,GAAG,CAAC,CAAC;IACb,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QACpC,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE;YACzD,MAAM,IAAI,SAAS,CAAC,CAAA,KAAA,EAAQ,CAAC,CAAA,2BAAA,EAA8B,GAAG,EAAE,CAAC,CAAC;SACnE;QACD,IAAI,GAAG,GAAG,CAAC,EAAE;YACX,MAAM,IAAI,UAAU,CAAC,CAAA,KAAA,EAAQ,CAAC,CAAA,uCAAA,EAA0C,GAAG,EAAE,CAAC,CAAC;SAChF;QACD,IAAI,IAAI,GAAG,CAAC;KACb;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAKK,MAAM,aAAa,GAAG,CAAC,MAAc,EAAE,IAAuB,EAAU,EAAE;IAC/E,OAAQ,MAAM,CAAC,QAAQ,EAAE;QACvB,KAAK,KAAK;YACR,OAAO,+QAAI,SAAM,CAAC,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACpD,KAAK,YAAY;YACf,OAAO,+QAAI,SAAM,CAAC;gBAChB,QAAQ,EAAE,YAAY;gBACtB,IAAI,EAAE,MAAM,CAAC,IAA8C;gBAC3D,IAAI,EAAE,MAAM,CAAC,IAA8C;gBAC3D,IAAI;aACL,CAAC,CAAC;QACL,KAAK,SAAS;YACZ,OAAO,+QAAI,SAAM,CAAC;gBAChB,QAAQ,EAAE,SAAS;gBACnB,OAAO,EAAE,MAAM,CAAC,OAAO;gBACvB,IAAI,EAAE,MAAM,CAAC,IAA4C;gBACzD,IAAI;aACL,CAAC,CAAC;QACL,KAAK,YAAY;YACf,OAAO,+QAAI,SAAM,CAAC;gBAChB,QAAQ,EAAE,YAAY;gBACtB,SAAS,EAAE,MAAM,CAAC,SAAS;gBAC3B,IAAI,EAAE,MAAM,CAAC,IAA8C;gBAC3D,IAAI;aACL,CAAC,CAAC;QACL,KAAK,WAAW;YACd,OAAO,+QAAI,SAAM,CAAC;gBAChB,QAAQ,EAAE,WAAW;gBACrB,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,IAAI,EAAE,MAAM,CAAC,IAA6C;gBAC1D,IAAI;aACL,CAAC,CAAC;QACL;YACE,MAAM,IAAI,KAAK,CAAC,CAAA,+BAAA,EAAkC,MAAM,CAAC,QAAQ,CAAA,iBAAA,CAAmB,CAAC,CAAC;KACzF;AACH,CAAC,CAAC","debugId":null}},
    {"offset": {"line": 955, "column": 0}, "map": {"version":3,"file":"tensor-impl.js","sourceRoot":"","sources":["../../lib/tensor-impl.ts"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1292, "column": 0}, "map": {"version":3,"file":"tensor.js","sourceRoot":"","sources":["../../lib/tensor.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;;;AAGlC,OAAO,EAAE,MAAM,IAAI,UAAU,EAAE,MAAM,kBAAkB,CAAC;;AAkYjD,MAAM,MAAM,8QAAG,SAA+B,CAAC","debugId":null}},
    {"offset": {"line": 1306, "column": 0}, "map": {"version":3,"file":"trace.js","sourceRoot":"","sources":["../../lib/trace.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;;;;;AAElC,OAAO,EAAE,GAAG,EAAE,MAAM,eAAe,CAAC;;AAK7B,MAAM,KAAK,GAAG,CAAC,UAAkB,EAAE,KAAa,EAAE,EAAE;IACzD,IAAI,+QAAO,MAAG,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,yQAAC,MAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,yQAAC,MAAG,CAAC,KAAK,EAAE;QACnE,OAAO;KACR;IACD,sCAAsC;IACtC,OAAO,CAAC,SAAS,CAAC,GAAG,UAAU,CAAA,OAAA,EAAU,KAAK,EAAE,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,GAAW,EAAE,QAAiB,EAAE,EAAE;IACpD,MAAM,KAAK,GAAG,IAAI,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5D,IAAI,YAAY,GAAG,KAAK,CAAC;IACzB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QACrC,IAAI,YAAY,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACpD,IAAI,KAAK,GAAG,CAAA,KAAA,EAAQ,GAAG,CAAA,EAAA,EAAK,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAC5D,IAAI,QAAQ,EAAE;gBACZ,KAAK,IAAI,CAAA,EAAA,EAAK,QAAQ,EAAE,CAAC;aAC1B;YACD,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACpB,OAAO;SACR;QACD,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;YACnC,YAAY,GAAG,IAAI,CAAC;SACrB;KACF;AACH,CAAC,CAAC;AAKK,MAAM,gBAAgB,GAAG,CAAC,QAAiB,EAAE,EAAE;IACpD,IAAI,+QAAO,MAAG,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,yQAAC,MAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,yQAAC,MAAG,CAAC,KAAK,EAAE;QACnE,OAAO;KACR;IACD,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAChC,CAAC,CAAC;AAKK,MAAM,cAAc,GAAG,CAAC,QAAiB,EAAE,EAAE;IAClD,IAAI,+QAAO,MAAG,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC,CAAC,yQAAC,MAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,yQAAC,MAAG,CAAC,KAAK,EAAE;QACnE,OAAO;KACR;IACD,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC9B,CAAC,CAAC","debugId":null}},
    {"offset": {"line": 1357, "column": 0}, "map": {"version":3,"file":"inference-session-impl.js","sourceRoot":"","sources":["../../lib/inference-session-impl.ts"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1550, "column": 0}, "map": {"version":3,"file":"inference-session.js","sourceRoot":"","sources":["../../lib/inference-session.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;;;;AAElC,OAAO,EAAE,gBAAgB,IAAI,oBAAoB,EAAE,MAAM,6BAA6B,CAAC;;AAujBhF,MAAM,gBAAgB,4RAA4B,mBAAoB,CAAC","debugId":null}},
    {"offset": {"line": 1564, "column": 0}, "map": {"version":3,"file":"tensor-conversion.js","sourceRoot":"","sources":["../../lib/tensor-conversion.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC","debugId":null}},
    {"offset": {"line": 1575, "column": 0}, "map": {"version":3,"file":"tensor-factory.js","sourceRoot":"","sources":["../../lib/tensor-factory.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC","debugId":null}},
    {"offset": {"line": 1586, "column": 0}, "map": {"version":3,"file":"onnx-model.js","sourceRoot":"","sources":["../../lib/onnx-model.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC","debugId":null}},
    {"offset": {"line": 1597, "column": 0}, "map": {"version":3,"file":"onnx-value.js","sourceRoot":"","sources":["../../lib/onnx-value.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC","debugId":null}},
    {"offset": {"line": 1608, "column": 0}, "map": {"version":3,"file":"index.js","sourceRoot":"","sources":["../../lib/index.ts"],"names":[],"mappings":"AAAA,4DAA4D;AAC5D,kCAAkC;AAElC;;;;;;;;;;;;;;GAcG","debugId":null}},
    {"offset": {"line": 1727, "column": 0}, "map": {"version":3,"sources":["file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/wasm-utils-env.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/wasm-utils-import.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/wasm-factory.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/wasm-utils.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/run-options.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/session-options.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/wasm-common.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/wasm-utils-load-file.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/wasm-core-impl.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/proxy-wrapper.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/wasm/session-handler-inference.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/backend-wasm.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/index.ts","file:///Users/dtorredo/Code/Re-Thing/node_modules/.pnpm/onnxruntime-web%401.21.0-dev.20250206-d981b153d3/node_modules/onnxruntime-web/lib/version.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nexport const isNode = !!(typeof process !== 'undefined' && process.versions && process.versions.node);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport type { OrtWasmModule } from './wasm-types';\nimport { isNode } from './wasm-utils-env';\n\n/**\n * The origin of the current location.\n *\n * In Node.js, this is undefined.\n */\nconst origin = isNode || typeof location === 'undefined' ? undefined : location.origin;\n\nconst getScriptSrc = (): string | undefined => {\n  // if Nodejs, return undefined\n  if (isNode) {\n    return undefined;\n  }\n  // if It's ESM, use import.meta.url\n  if (BUILD_DEFS.IS_ESM) {\n    // For ESM, if the import.meta.url is a file URL, this usually means the bundler rewrites `import.meta.url` to\n    // the file path at compile time. In this case, this file path cannot be used to determine the runtime URL.\n    //\n    // We need to use the URL constructor like this:\n    // ```js\n    // new URL('actual-bundle-name.js', import.meta.url).href\n    // ```\n    // So that bundler can preprocess the URL correctly.\n    if (BUILD_DEFS.ESM_IMPORT_META_URL?.startsWith('file:')) {\n      // if the rewritten URL is a relative path, we need to use the origin to resolve the URL.\n      return new URL(new URL(BUILD_DEFS.BUNDLE_FILENAME, BUILD_DEFS.ESM_IMPORT_META_URL).href, origin).href;\n    }\n\n    return BUILD_DEFS.ESM_IMPORT_META_URL;\n  }\n\n  return typeof document !== 'undefined'\n    ? (document.currentScript as HTMLScriptElement)?.src\n    : // use `self.location.href` if available\n      typeof self !== 'undefined'\n      ? self.location?.href\n      : undefined;\n};\n\n/**\n * The classic script source URL. This is not always available in non ESModule environments.\n *\n * In Node.js, this is undefined.\n */\nexport const scriptSrc = getScriptSrc();\n\n/**\n * Infer the wasm path prefix from the script source URL.\n *\n * @returns The inferred wasm path prefix, or undefined if the script source URL is not available or is a blob URL.\n */\nexport const inferWasmPathPrefixFromScriptSrc = (): string | undefined => {\n  if (scriptSrc && !scriptSrc.startsWith('blob:')) {\n    return scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n  }\n  return undefined;\n};\n\n/**\n * Check if the given filename with prefix is from the same origin.\n */\nconst isSameOrigin = (filename: string, prefixOverride?: string) => {\n  try {\n    const baseUrl = prefixOverride ?? scriptSrc;\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.origin === origin;\n  } catch {\n    return false;\n  }\n};\n\n/**\n * Normalize the inputs to an absolute URL with the given prefix override. If failed, return undefined.\n */\nconst normalizeUrl = (filename: string, prefixOverride?: string) => {\n  const baseUrl = prefixOverride ?? scriptSrc;\n  try {\n    const url = baseUrl ? new URL(filename, baseUrl) : new URL(filename);\n    return url.href;\n  } catch {\n    return undefined;\n  }\n};\n\n/**\n * Create a fallback URL if an absolute URL cannot be created by the normalizeUrl function.\n */\nconst fallbackUrl = (filename: string, prefixOverride?: string) => `${prefixOverride ?? './'}${filename}`;\n\n/**\n * This helper function is used to preload a module from a URL.\n *\n * If the origin of the worker URL is different from the current origin, the worker cannot be loaded directly.\n * See discussions in https://github.com/webpack-contrib/worker-loader/issues/154\n *\n * In this case, we will fetch the worker URL and create a new Blob URL with the same origin as a workaround.\n *\n * @param absoluteUrl - The absolute URL to preload.\n *\n * @returns - A promise that resolves to a new Blob URL\n */\nconst preload = async (absoluteUrl: string): Promise<string> => {\n  const response = await fetch(absoluteUrl, { credentials: 'same-origin' });\n  const blob = await response.blob();\n  return URL.createObjectURL(blob);\n};\n\n/**\n * This helper function is used to dynamically import a module from a URL.\n *\n * The build script has special handling for this function to ensure that the URL is not bundled into the final output.\n *\n * @param url - The URL to import.\n *\n * @returns - A promise that resolves to the default export of the module.\n */\nconst dynamicImportDefault = async <T>(url: string): Promise<T> =>\n  (await import(/* webpackIgnore: true */ url)).default;\n\n/**\n * The proxy worker factory imported from the proxy worker module.\n *\n * This is only available when the WebAssembly proxy is not disabled.\n */\nconst createProxyWorker: ((urlOverride?: string) => Worker) | undefined =\n  // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n  BUILD_DEFS.DISABLE_WASM_PROXY ? undefined : require('./proxy-worker/main').default;\n\n/**\n * Import the proxy worker.\n *\n * This function will perform the following steps:\n * 1. If a preload is needed, it will preload the module and return the object URL.\n * 2. Use the proxy worker factory to create the proxy worker.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The proxy worker.\n */\nexport const importProxyWorker = async (): Promise<[undefined | string, Worker]> => {\n  if (!scriptSrc) {\n    throw new Error('Failed to load proxy worker: cannot determine the script source URL.');\n  }\n\n  // If the script source is from the same origin, we can use the embedded proxy module directly.\n  if (isSameOrigin(scriptSrc)) {\n    return [undefined, createProxyWorker!()];\n  }\n\n  // Otherwise, need to preload\n  const url = await preload(scriptSrc);\n  return [url, createProxyWorker!(url)];\n};\n\n/**\n * The embedded WebAssembly module.\n *\n * This is only available in ESM and when embedding is not disabled.\n */\nconst embeddedWasmModule: EmscriptenModuleFactory<OrtWasmModule> | undefined =\n  BUILD_DEFS.IS_ESM && BUILD_DEFS.ENABLE_BUNDLE_WASM_JS\n    ? // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n      require(\n        !BUILD_DEFS.DISABLE_JSEP\n          ? '../../dist/ort-wasm-simd-threaded.jsep.mjs'\n          : '../../dist/ort-wasm-simd-threaded.mjs',\n      ).default\n    : undefined;\n\n/**\n * Import the WebAssembly module.\n *\n * This function will perform the following steps:\n * 1. If the embedded module exists and no custom URL is specified, use the embedded module.\n * 2. If a preload is needed, it will preload the module and return the object URL.\n * 3. Otherwise, it will perform a dynamic import of the module.\n *\n * @returns - A promise that resolves to a tuple of 2 elements:\n *            - The object URL of the preloaded module, or undefined if no preload is needed.\n *            - The default export of the module, which is a factory function to create the WebAssembly module.\n */\nexport const importWasmModule = async (\n  urlOverride: string | undefined,\n  prefixOverride: string | undefined,\n  isMultiThreaded: boolean,\n): Promise<[undefined | string, EmscriptenModuleFactory<OrtWasmModule>]> => {\n  if (!urlOverride && !prefixOverride && embeddedWasmModule && scriptSrc && isSameOrigin(scriptSrc)) {\n    return [undefined, embeddedWasmModule];\n  } else {\n    const wasmModuleFilename = !BUILD_DEFS.DISABLE_JSEP\n      ? 'ort-wasm-simd-threaded.jsep.mjs'\n      : 'ort-wasm-simd-threaded.mjs';\n    const wasmModuleUrl = urlOverride ?? normalizeUrl(wasmModuleFilename, prefixOverride);\n    // need to preload if all of the following conditions are met:\n    // 1. not in Node.js.\n    //    - Node.js does not have the same origin policy for creating workers.\n    // 2. multi-threaded is enabled.\n    //    - If multi-threaded is disabled, no worker will be created. So we don't need to preload the module.\n    // 3. the absolute URL is available.\n    //    - If the absolute URL is failed to be created, the origin cannot be determined. In this case, we will not\n    //    preload the module.\n    // 4. the worker URL is not from the same origin.\n    //    - If the worker URL is from the same origin, we can create the worker directly.\n    const needPreload = !isNode && isMultiThreaded && wasmModuleUrl && !isSameOrigin(wasmModuleUrl, prefixOverride);\n    const url = needPreload\n      ? await preload(wasmModuleUrl)\n      : (wasmModuleUrl ?? fallbackUrl(wasmModuleFilename, prefixOverride));\n    return [needPreload ? url : undefined, await dynamicImportDefault<EmscriptenModuleFactory<OrtWasmModule>>(url)];\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Env } from 'onnxruntime-common';\n\nimport type { OrtWasmModule } from './wasm-types';\nimport { importWasmModule, inferWasmPathPrefixFromScriptSrc } from './wasm-utils-import';\n\nlet wasm: OrtWasmModule | undefined;\nlet initialized = false;\nlet initializing = false;\nlet aborted = false;\n\nconst isMultiThreadSupported = (): boolean => {\n  // If 'SharedArrayBuffer' is not available, WebAssembly threads will not work.\n  if (typeof SharedArrayBuffer === 'undefined') {\n    return false;\n  }\n\n  try {\n    // Test for transferability of SABs (for browsers. needed for Firefox)\n    // https://groups.google.com/forum/#!msg/mozilla.dev.platform/IHkBZlHETpA/dwsMNchWEQAJ\n    if (typeof MessageChannel !== 'undefined') {\n      new MessageChannel().port1.postMessage(new SharedArrayBuffer(1));\n    }\n\n    // Test for WebAssembly threads capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing threaded instructions.\n    return WebAssembly.validate(\n      new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 5, 4, 1, 3, 1, 1, 10, 11, 1, 9, 0, 65, 0, 254, 16,\n        2, 0, 26, 11,\n      ]),\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nconst isSimdSupported = (): boolean => {\n  try {\n    // Test for WebAssembly SIMD capability (for both browsers and Node.js)\n    // This typed array is a WebAssembly program containing SIMD instructions.\n\n    // The binary data is generated from the following code by wat2wasm:\n    //\n    // (module\n    //   (type $t0 (func))\n    //   (func $f0 (type $t0)\n    //     (drop\n    //       (i32x4.dot_i16x8_s\n    //         (i8x16.splat\n    //           (i32.const 0))\n    //         (v128.const i32x4 0x00000000 0x00000000 0x00000000 0x00000000)))))\n\n    return WebAssembly.validate(\n      new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 4, 1, 96, 0, 0, 3, 2, 1, 0, 10, 30, 1, 28, 0, 65, 0, 253, 15, 253, 12, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 253, 186, 1, 26, 11,\n      ]),\n    );\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const initializeWebAssembly = async (flags: Env.WebAssemblyFlags): Promise<void> => {\n  if (initialized) {\n    return Promise.resolve();\n  }\n  if (initializing) {\n    throw new Error(\"multiple calls to 'initializeWebAssembly()' detected.\");\n  }\n  if (aborted) {\n    throw new Error(\"previous call to 'initializeWebAssembly()' failed.\");\n  }\n\n  initializing = true;\n\n  // wasm flags are already initialized\n  const timeout = flags.initTimeout!;\n  let numThreads = flags.numThreads!;\n\n  // ensure SIMD is supported\n  if (!isSimdSupported()) {\n    throw new Error('WebAssembly SIMD is not supported in the current environment.');\n  }\n\n  // check if multi-threading is supported\n  const multiThreadSupported = isMultiThreadSupported();\n  if (numThreads > 1 && !multiThreadSupported) {\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'env.wasm.numThreads is set to ' +\n          numThreads +\n          ', but this will not work unless you enable crossOriginIsolated mode. ' +\n          'See https://web.dev/cross-origin-isolation-guide/ for more info.',\n      );\n    }\n\n    // eslint-disable-next-line no-console\n    console.warn(\n      'WebAssembly multi-threading is not supported in the current environment. ' + 'Falling back to single-threading.',\n    );\n\n    // set flags.numThreads to 1 so that OrtInit() will not create a global thread pool.\n    flags.numThreads = numThreads = 1;\n  }\n\n  const wasmPaths = flags.wasmPaths;\n  const wasmPrefixOverride = typeof wasmPaths === 'string' ? wasmPaths : undefined;\n  const mjsPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.mjs;\n  const mjsPathOverride = (mjsPathOverrideFlag as URL)?.href ?? mjsPathOverrideFlag;\n  const wasmPathOverrideFlag = (wasmPaths as Env.WasmFilePaths)?.wasm;\n  const wasmPathOverride = (wasmPathOverrideFlag as URL)?.href ?? wasmPathOverrideFlag;\n  const wasmBinaryOverride = flags.wasmBinary;\n\n  const [objectUrl, ortWasmFactory] = await importWasmModule(mjsPathOverride, wasmPrefixOverride, numThreads > 1);\n\n  let isTimeout = false;\n\n  const tasks: Array<Promise<void>> = [];\n\n  // promise for timeout\n  if (timeout > 0) {\n    tasks.push(\n      new Promise((resolve) => {\n        setTimeout(() => {\n          isTimeout = true;\n          resolve();\n        }, timeout);\n      }),\n    );\n  }\n\n  // promise for module initialization\n  tasks.push(\n    new Promise((resolve, reject) => {\n      const config: Partial<OrtWasmModule> = {\n        /**\n         * The number of threads. WebAssembly will create (Module.numThreads - 1) workers. If it is 1, no worker will be\n         * created.\n         */\n        numThreads,\n      };\n\n      if (wasmBinaryOverride) {\n        // Set a custom buffer which contains the WebAssembly binary. This will skip the wasm file fetching.\n        config.wasmBinary = wasmBinaryOverride;\n      } else if (wasmPathOverride || wasmPrefixOverride) {\n        // A callback function to locate the WebAssembly file. The function should return the full path of the file.\n        //\n        // Since Emscripten 3.1.58, this function is only called for the .wasm file.\n        config.locateFile = (fileName) => wasmPathOverride ?? wasmPrefixOverride + fileName;\n      } else if (mjsPathOverride && mjsPathOverride.indexOf('blob:') !== 0) {\n        // if mjs path is specified, use it as the base path for the .wasm file.\n        config.locateFile = (fileName) => new URL(fileName, mjsPathOverride).href;\n      } else if (objectUrl) {\n        const inferredWasmPathPrefix = inferWasmPathPrefixFromScriptSrc();\n        if (inferredWasmPathPrefix) {\n          // if the wasm module is preloaded, use the inferred wasm path as the base path for the .wasm file.\n          config.locateFile = (fileName) => inferredWasmPathPrefix + fileName;\n        }\n      }\n\n      ortWasmFactory(config).then(\n        // wasm module initialized successfully\n        (module) => {\n          initializing = false;\n          initialized = true;\n          wasm = module;\n          resolve();\n          if (objectUrl) {\n            URL.revokeObjectURL(objectUrl);\n          }\n        },\n        // wasm module failed to initialize\n        (what) => {\n          initializing = false;\n          aborted = true;\n          reject(what);\n        },\n      );\n    }),\n  );\n\n  await Promise.race(tasks);\n\n  if (isTimeout) {\n    throw new Error(`WebAssembly backend initializing failed due to timeout: ${timeout}ms`);\n  }\n};\n\nexport const getInstance = (): OrtWasmModule => {\n  if (initialized && wasm) {\n    return wasm;\n  }\n\n  throw new Error('WebAssembly is not initialized yet.');\n};\n\nexport const dispose = (): void => {\n  if (initialized && !initializing && !aborted) {\n    // TODO: currently \"PThread.terminateAllThreads()\" is not exposed in the wasm module.\n    //       And this function is not yet called by any code.\n    //       If it is needed in the future, we should expose it in the wasm module and uncomment the following line.\n\n    // wasm?.PThread?.terminateAllThreads();\n    wasm = undefined;\n\n    initializing = false;\n    initialized = false;\n    aborted = true;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { getInstance } from './wasm-factory';\n\nexport const allocWasmString = (data: string, allocs: number[]): number => {\n  const wasm = getInstance();\n\n  const dataLength = wasm.lengthBytesUTF8(data) + 1;\n  const dataOffset = wasm._malloc(dataLength);\n  wasm.stringToUTF8(data, dataOffset, dataLength);\n  allocs.push(dataOffset);\n\n  return dataOffset;\n};\n\ninterface ExtraOptionsHandler {\n  (name: string, value: string): void;\n}\n\nexport const iterateExtraOptions = (\n  options: Record<string, unknown>,\n  prefix: string,\n  seen: WeakSet<Record<string, unknown>>,\n  handler: ExtraOptionsHandler,\n): void => {\n  if (typeof options == 'object' && options !== null) {\n    if (seen.has(options)) {\n      throw new Error('Circular reference in options');\n    } else {\n      seen.add(options);\n    }\n  }\n\n  Object.entries(options).forEach(([key, value]) => {\n    const name = prefix ? prefix + key : key;\n    if (typeof value === 'object') {\n      iterateExtraOptions(value as Record<string, unknown>, name + '.', seen, handler);\n    } else if (typeof value === 'string' || typeof value === 'number') {\n      handler(name, value.toString());\n    } else if (typeof value === 'boolean') {\n      handler(name, value ? '1' : '0');\n    } else {\n      throw new Error(`Can't handle extra config type: ${typeof value}`);\n    }\n  });\n};\n\n/**\n * check web assembly API's last error and throw error if any error occurred.\n * @param message a message used when an error occurred.\n */\nexport const checkLastError = (message: string): void => {\n  const wasm = getInstance();\n\n  const stack = wasm.stackSave();\n  try {\n    const ptrSize = wasm.PTR_SIZE;\n    const paramsOffset = wasm.stackAlloc(2 * ptrSize);\n    wasm._OrtGetLastError(paramsOffset, paramsOffset + ptrSize);\n    const errorCode = Number(wasm.getValue(paramsOffset, ptrSize === 4 ? 'i32' : 'i64'));\n    const errorMessagePointer = wasm.getValue(paramsOffset + ptrSize, '*');\n    const errorMessage = errorMessagePointer ? wasm.UTF8ToString(errorMessagePointer) : '';\n    throw new Error(`${message} ERROR_CODE: ${errorCode}, ERROR_MESSAGE: ${errorMessage}`);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from 'onnxruntime-common';\n\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError, iterateExtraOptions } from './wasm-utils';\n\nexport const setRunOptions = (options: InferenceSession.RunOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let runOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const runOptions: InferenceSession.RunOptions = options || {};\n\n  try {\n    if (options?.logSeverityLevel === undefined) {\n      runOptions.logSeverityLevel = 2; // Default to warning\n    } else if (\n      typeof options.logSeverityLevel !== 'number' ||\n      !Number.isInteger(options.logSeverityLevel) ||\n      options.logSeverityLevel < 0 ||\n      options.logSeverityLevel > 4\n    ) {\n      throw new Error(`log serverity level is not valid: ${options.logSeverityLevel}`);\n    }\n\n    if (options?.logVerbosityLevel === undefined) {\n      runOptions.logVerbosityLevel = 0; // Default to 0\n    } else if (typeof options.logVerbosityLevel !== 'number' || !Number.isInteger(options.logVerbosityLevel)) {\n      throw new Error(`log verbosity level is not valid: ${options.logVerbosityLevel}`);\n    }\n\n    if (options?.terminate === undefined) {\n      runOptions.terminate = false;\n    }\n\n    let tagDataOffset = 0;\n    if (options?.tag !== undefined) {\n      tagDataOffset = allocWasmString(options.tag, allocs);\n    }\n\n    runOptionsHandle = wasm._OrtCreateRunOptions(\n      runOptions.logSeverityLevel!,\n      runOptions.logVerbosityLevel!,\n      !!runOptions.terminate!,\n      tagDataOffset,\n    );\n    if (runOptionsHandle === 0) {\n      checkLastError(\"Can't create run options.\");\n    }\n\n    if (options?.extra !== undefined) {\n      iterateExtraOptions(options.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddRunConfigEntry(runOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a run config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [runOptionsHandle, allocs];\n  } catch (e) {\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { InferenceSession } from 'onnxruntime-common';\n\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError, iterateExtraOptions } from './wasm-utils';\n\nconst getGraphOptimzationLevel = (graphOptimizationLevel: string | unknown): number => {\n  switch (graphOptimizationLevel) {\n    case 'disabled':\n      return 0;\n    case 'basic':\n      return 1;\n    case 'extended':\n      return 2;\n    case 'all':\n      return 99;\n    default:\n      throw new Error(`unsupported graph optimization level: ${graphOptimizationLevel}`);\n  }\n};\n\nconst getExecutionMode = (executionMode: 'sequential' | 'parallel'): number => {\n  switch (executionMode) {\n    case 'sequential':\n      return 0;\n    case 'parallel':\n      return 1;\n    default:\n      throw new Error(`unsupported execution mode: ${executionMode}`);\n  }\n};\n\nconst appendDefaultOptions = (options: InferenceSession.SessionOptions): void => {\n  if (!options.extra) {\n    options.extra = {};\n  }\n  if (!options.extra.session) {\n    options.extra.session = {};\n  }\n  const session = options.extra.session as Record<string, string>;\n  if (!session.use_ort_model_bytes_directly) {\n    // eslint-disable-next-line camelcase\n    session.use_ort_model_bytes_directly = '1';\n  }\n\n  // if using JSEP with WebGPU, always disable memory pattern\n  if (\n    options.executionProviders &&\n    options.executionProviders.some((ep) => (typeof ep === 'string' ? ep : ep.name) === 'webgpu')\n  ) {\n    options.enableMemPattern = false;\n  }\n};\n\nconst setExecutionProviders = (\n  sessionOptionsHandle: number,\n  executionProviders: readonly InferenceSession.ExecutionProviderConfig[],\n  allocs: number[],\n): void => {\n  for (const ep of executionProviders) {\n    let epName = typeof ep === 'string' ? ep : ep.name;\n\n    // check EP name\n    switch (epName) {\n      case 'webnn':\n        epName = 'WEBNN';\n        if (typeof ep !== 'string') {\n          const webnnOptions = ep as InferenceSession.WebNNExecutionProviderOption;\n          // const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          if (deviceType) {\n            const keyDataOffset = allocWasmString('deviceType', allocs);\n            const valueDataOffset = allocWasmString(deviceType, allocs);\n            if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n              checkLastError(`Can't set a session config entry: 'deviceType' - ${deviceType}.`);\n            }\n          }\n        }\n        break;\n      case 'webgpu':\n        epName = 'JS';\n        if (typeof ep !== 'string') {\n          const webgpuOptions = ep as InferenceSession.WebGpuExecutionProviderOption;\n          if (webgpuOptions?.preferredLayout) {\n            if (webgpuOptions.preferredLayout !== 'NCHW' && webgpuOptions.preferredLayout !== 'NHWC') {\n              throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${webgpuOptions.preferredLayout}`);\n            }\n            const keyDataOffset = allocWasmString('preferredLayout', allocs);\n            const valueDataOffset = allocWasmString(webgpuOptions.preferredLayout, allocs);\n            if (getInstance()._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n              checkLastError(`Can't set a session config entry: 'preferredLayout' - ${webgpuOptions.preferredLayout}.`);\n            }\n          }\n        }\n        break;\n      case 'wasm':\n      case 'cpu':\n        continue;\n      default:\n        throw new Error(`not supported execution provider: ${epName}`);\n    }\n\n    const epNameDataOffset = allocWasmString(epName, allocs);\n    if (getInstance()._OrtAppendExecutionProvider(sessionOptionsHandle, epNameDataOffset) !== 0) {\n      checkLastError(`Can't append execution provider: ${epName}.`);\n    }\n  }\n};\n\nexport const setSessionOptions = (options?: InferenceSession.SessionOptions): [number, number[]] => {\n  const wasm = getInstance();\n  let sessionOptionsHandle = 0;\n  const allocs: number[] = [];\n\n  const sessionOptions: InferenceSession.SessionOptions = options || {};\n  appendDefaultOptions(sessionOptions);\n\n  try {\n    const graphOptimizationLevel = getGraphOptimzationLevel(sessionOptions.graphOptimizationLevel ?? 'all');\n    const executionMode = getExecutionMode(sessionOptions.executionMode ?? 'sequential');\n    const logIdDataOffset =\n      typeof sessionOptions.logId === 'string' ? allocWasmString(sessionOptions.logId, allocs) : 0;\n\n    const logSeverityLevel = sessionOptions.logSeverityLevel ?? 2; // Default to 2 - warning\n    if (!Number.isInteger(logSeverityLevel) || logSeverityLevel < 0 || logSeverityLevel > 4) {\n      throw new Error(`log serverity level is not valid: ${logSeverityLevel}`);\n    }\n\n    const logVerbosityLevel = sessionOptions.logVerbosityLevel ?? 0; // Default to 0 - verbose\n    if (!Number.isInteger(logVerbosityLevel) || logVerbosityLevel < 0 || logVerbosityLevel > 4) {\n      throw new Error(`log verbosity level is not valid: ${logVerbosityLevel}`);\n    }\n\n    const optimizedModelFilePathOffset =\n      typeof sessionOptions.optimizedModelFilePath === 'string'\n        ? allocWasmString(sessionOptions.optimizedModelFilePath, allocs)\n        : 0;\n\n    sessionOptionsHandle = wasm._OrtCreateSessionOptions(\n      graphOptimizationLevel,\n      !!sessionOptions.enableCpuMemArena,\n      !!sessionOptions.enableMemPattern,\n      executionMode,\n      !!sessionOptions.enableProfiling,\n      0,\n      logIdDataOffset,\n      logSeverityLevel,\n      logVerbosityLevel,\n      optimizedModelFilePathOffset,\n    );\n    if (sessionOptionsHandle === 0) {\n      checkLastError(\"Can't create session options.\");\n    }\n\n    if (sessionOptions.executionProviders) {\n      setExecutionProviders(sessionOptionsHandle, sessionOptions.executionProviders, allocs);\n    }\n\n    if (sessionOptions.enableGraphCapture !== undefined) {\n      if (typeof sessionOptions.enableGraphCapture !== 'boolean') {\n        throw new Error(`enableGraphCapture must be a boolean value: ${sessionOptions.enableGraphCapture}`);\n      }\n      const keyDataOffset = allocWasmString('enableGraphCapture', allocs);\n      const valueDataOffset = allocWasmString(sessionOptions.enableGraphCapture.toString(), allocs);\n      if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n        checkLastError(\n          `Can't set a session config entry: 'enableGraphCapture' - ${sessionOptions.enableGraphCapture}.`,\n        );\n      }\n    }\n\n    if (sessionOptions.freeDimensionOverrides) {\n      for (const [name, value] of Object.entries(sessionOptions.freeDimensionOverrides)) {\n        if (typeof name !== 'string') {\n          throw new Error(`free dimension override name must be a string: ${name}`);\n        }\n        if (typeof value !== 'number' || !Number.isInteger(value) || value < 0) {\n          throw new Error(`free dimension override value must be a non-negative integer: ${value}`);\n        }\n        const nameOffset = allocWasmString(name, allocs);\n        if (wasm._OrtAddFreeDimensionOverride(sessionOptionsHandle, nameOffset, value) !== 0) {\n          checkLastError(`Can't set a free dimension override: ${name} - ${value}.`);\n        }\n      }\n    }\n\n    if (sessionOptions.extra !== undefined) {\n      iterateExtraOptions(sessionOptions.extra, '', new WeakSet<Record<string, unknown>>(), (key, value) => {\n        const keyDataOffset = allocWasmString(key, allocs);\n        const valueDataOffset = allocWasmString(value, allocs);\n\n        if (wasm._OrtAddSessionConfigEntry(sessionOptionsHandle, keyDataOffset, valueDataOffset) !== 0) {\n          checkLastError(`Can't set a session config entry: ${key} - ${value}.`);\n        }\n      });\n    }\n\n    return [sessionOptionsHandle, allocs];\n  } catch (e) {\n    if (sessionOptionsHandle !== 0) {\n      if (wasm._OrtReleaseSessionOptions(sessionOptionsHandle) !== 0) {\n        checkLastError(\"Can't release session options.\");\n      }\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n    throw e;\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Tensor } from 'onnxruntime-common';\n\n// a dummy type declaration for Float16Array in case any polyfill is available.\ndeclare global {\n  // eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-explicit-any\n  const Float16Array: any;\n}\n\n// This file includes common definitions. They do NOT have dependency on the WebAssembly instance.\n\n/**\n * Copied from ONNX definition. Use this to drop dependency 'onnx_proto' to decrease compiled .js file size.\n */\nexport const enum DataType {\n  undefined = 0,\n  float = 1,\n  uint8 = 2,\n  int8 = 3,\n  uint16 = 4,\n  int16 = 5,\n  int32 = 6,\n  int64 = 7,\n  string = 8,\n  bool = 9,\n  float16 = 10,\n  double = 11,\n  uint32 = 12,\n  uint64 = 13,\n  complex64 = 14,\n  complex128 = 15,\n  bfloat16 = 16,\n\n  // 4-bit data-types\n  uint4 = 21,\n  int4 = 22,\n}\n\n/**\n * Map string tensor data to enum value\n */\nexport const tensorDataTypeStringToEnum = (type: string): DataType => {\n  switch (type) {\n    case 'int8':\n      return DataType.int8;\n    case 'uint8':\n      return DataType.uint8;\n    case 'bool':\n      return DataType.bool;\n    case 'int16':\n      return DataType.int16;\n    case 'uint16':\n      return DataType.uint16;\n    case 'int32':\n      return DataType.int32;\n    case 'uint32':\n      return DataType.uint32;\n    case 'float16':\n      return DataType.float16;\n    case 'float32':\n      return DataType.float;\n    case 'float64':\n      return DataType.double;\n    case 'string':\n      return DataType.string;\n    case 'int64':\n      return DataType.int64;\n    case 'uint64':\n      return DataType.uint64;\n    case 'int4':\n      return DataType.int4;\n    case 'uint4':\n      return DataType.uint4;\n\n    default:\n      throw new Error(`unsupported data type: ${type}`);\n  }\n};\n\n/**\n * Map enum value to string tensor data\n */\nexport const tensorDataTypeEnumToString = (typeProto: DataType): Tensor.Type => {\n  switch (typeProto) {\n    case DataType.int8:\n      return 'int8';\n    case DataType.uint8:\n      return 'uint8';\n    case DataType.bool:\n      return 'bool';\n    case DataType.int16:\n      return 'int16';\n    case DataType.uint16:\n      return 'uint16';\n    case DataType.int32:\n      return 'int32';\n    case DataType.uint32:\n      return 'uint32';\n    case DataType.float16:\n      return 'float16';\n    case DataType.float:\n      return 'float32';\n    case DataType.double:\n      return 'float64';\n    case DataType.string:\n      return 'string';\n    case DataType.int64:\n      return 'int64';\n    case DataType.uint64:\n      return 'uint64';\n    case DataType.int4:\n      return 'int4';\n    case DataType.uint4:\n      return 'uint4';\n\n    default:\n      throw new Error(`unsupported data type: ${typeProto}`);\n  }\n};\n\n/**\n * get tensor size in bytes by the given data type and dimensions\n * @returns size in integer or undefined if the data type is not supported\n */\nexport const calculateTensorSizeInBytes = (\n  dateType: number,\n  dimsOrSize: readonly number[] | number,\n): number | undefined => {\n  const elementSize = [\n    -1, // undefined = 0\n    4, // float = 1\n    1, // uint8 = 2\n    1, // int8 = 3\n    2, // uint16 = 4\n    2, // int16 = 5\n    4, // int32 = 6\n    8, // int64 = 7\n    -1, // string = 8\n    1, // bool = 9\n    2, // float16 = 10\n    8, // double = 11\n    4, // uint32 = 12\n    8, // uint64 = 13\n    -1, // complex64 = 14\n    -1, // complex128 = 15\n    -1, // bfloat16 = 16\n    -1, // FLOAT8E4M3FN = 17\n    -1, // FLOAT8E4M3FNUZ = 18\n    -1, // FLOAT8E5M2 = 19\n    -1, // FLOAT8E5M2FNUZ = 20\n    0.5, // uint4 = 21\n    0.5, // int4 = 22\n  ][dateType];\n\n  const size = typeof dimsOrSize === 'number' ? dimsOrSize : dimsOrSize.reduce((a, b) => a * b, 1);\n  return elementSize > 0 ? Math.ceil(size * elementSize) : undefined;\n};\n\n/**\n * get typed array constructor by the given tensor type\n */\nexport const tensorTypeToTypedArrayConstructor = (\n  type: Tensor.Type,\n):\n  | Float32ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int8ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int16ArrayConstructor\n  | Int32ArrayConstructor\n  | BigInt64ArrayConstructor\n  | Uint8ArrayConstructor\n  | Float64ArrayConstructor\n  | Uint32ArrayConstructor\n  | BigUint64ArrayConstructor => {\n  switch (type) {\n    case 'float16':\n      // allow Float16Array polyfill.\n      return typeof Float16Array !== 'undefined' && Float16Array.from ? Float16Array : Uint16Array;\n    case 'float32':\n      return Float32Array;\n    case 'uint8':\n      return Uint8Array;\n    case 'int8':\n      return Int8Array;\n    case 'uint16':\n      return Uint16Array;\n    case 'int16':\n      return Int16Array;\n    case 'int32':\n      return Int32Array;\n    case 'bool':\n      return Uint8Array;\n    case 'float64':\n      return Float64Array;\n    case 'uint32':\n      return Uint32Array;\n    case 'int64':\n      return BigInt64Array;\n    case 'uint64':\n      return BigUint64Array;\n    default:\n      throw new Error(`unsupported type: ${type}`);\n  }\n};\n\n/**\n * Map string log level to integer value\n */\nexport const logLevelStringToEnum = (logLevel?: 'verbose' | 'info' | 'warning' | 'error' | 'fatal'): number => {\n  switch (logLevel) {\n    case 'verbose':\n      return 0;\n    case 'info':\n      return 1;\n    case 'warning':\n      return 2;\n    case 'error':\n      return 3;\n    case 'fatal':\n      return 4;\n    default:\n      throw new Error(`unsupported logging level: ${logLevel}`);\n  }\n};\n\n/**\n * Check whether the given tensor type is supported by GPU buffer\n */\nexport const isGpuBufferSupportedType = (type: Tensor.Type): type is Tensor.GpuBufferDataTypes =>\n  type === 'float32' ||\n  type === 'float16' ||\n  type === 'int32' ||\n  type === 'int64' ||\n  type === 'uint32' ||\n  type === 'uint8' ||\n  type === 'bool' ||\n  type === 'uint4' ||\n  type === 'int4';\n\n/**\n * Check whether the given tensor type is supported by WebNN MLTensor\n */\nexport const isMLTensorSupportedType = (type: Tensor.Type): type is Tensor.MLTensorDataTypes =>\n  type === 'float32' ||\n  type === 'float16' ||\n  type === 'int32' ||\n  type === 'int64' ||\n  type === 'uint32' ||\n  type === 'uint64' ||\n  type === 'int8' ||\n  type === 'uint8' ||\n  type === 'bool' ||\n  type === 'uint4' ||\n  type === 'int4';\n\n/**\n * Map string data location to integer value\n */\nexport const dataLocationStringToEnum = (location: Tensor.DataLocation): number => {\n  switch (location) {\n    case 'none':\n      return 0;\n    case 'cpu':\n      return 1;\n    case 'cpu-pinned':\n      return 2;\n    case 'texture':\n      return 3;\n    case 'gpu-buffer':\n      return 4;\n    case 'ml-tensor':\n      return 5;\n    default:\n      throw new Error(`unsupported data location: ${location}`);\n  }\n};\n\n/**\n * Map integer data location to string value\n */\nexport const dataLocationEnumToString = (location: number): Tensor.DataLocation | undefined =>\n  (['none', 'cpu', 'cpu-pinned', 'texture', 'gpu-buffer', 'ml-tensor'] as const)[location];\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { isNode } from './wasm-utils-env';\n\n/**\n * Load a file into a Uint8Array.\n *\n * @param file - the file to load. Can be a URL/path, a Blob, an ArrayBuffer, or a Uint8Array.\n * @returns a Uint8Array containing the file data.\n */\nexport const loadFile = async (file: string | Blob | ArrayBufferLike | Uint8Array): Promise<Uint8Array> => {\n  if (typeof file === 'string') {\n    if (isNode) {\n      // load file into ArrayBuffer in Node.js\n      try {\n        const { readFile } = require('node:fs/promises');\n        return new Uint8Array(await readFile(file));\n      } catch (e) {\n        if (e.code === 'ERR_FS_FILE_TOO_LARGE') {\n          // file is too large, use fs.createReadStream instead\n          const { createReadStream } = require('node:fs');\n          const stream = createReadStream(file);\n          const chunks: Uint8Array[] = [];\n          for await (const chunk of stream) {\n            chunks.push(chunk);\n          }\n          return new Uint8Array(Buffer.concat(chunks));\n        }\n        throw e;\n      }\n    } else {\n      // load file into ArrayBuffer in browsers\n      const response = await fetch(file);\n      if (!response.ok) {\n        throw new Error(`failed to load external data file: ${file}`);\n      }\n      const contentLengthHeader = response.headers.get('Content-Length');\n      const fileSize = contentLengthHeader ? parseInt(contentLengthHeader, 10) : 0;\n      if (fileSize < 1073741824 /* 1GB */) {\n        // when Content-Length header is not set, we cannot determine the file size. We assume it is small enough to\n        // load into memory.\n        return new Uint8Array(await response.arrayBuffer());\n      } else {\n        // file is too large, use stream instead\n        if (!response.body) {\n          throw new Error(`failed to load external data file: ${file}, no response body.`);\n        }\n        const reader = response.body.getReader();\n\n        let buffer;\n        try {\n          // try to create ArrayBuffer directly\n          buffer = new ArrayBuffer(fileSize);\n        } catch (e) {\n          if (e instanceof RangeError) {\n            // use WebAssembly Memory to allocate larger ArrayBuffer\n            const pages = Math.ceil(fileSize / 65536);\n            buffer = new WebAssembly.Memory({ initial: pages, maximum: pages }).buffer;\n          } else {\n            throw e;\n          }\n        }\n\n        let offset = 0;\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) {\n            break;\n          }\n          const chunkSize = value.byteLength;\n          const chunk = new Uint8Array(buffer, offset, chunkSize);\n          chunk.set(value);\n          offset += chunkSize;\n        }\n        return new Uint8Array(buffer, 0, fileSize);\n      }\n    }\n  } else if (file instanceof Blob) {\n    return new Uint8Array(await file.arrayBuffer());\n  } else if (file instanceof Uint8Array) {\n    return file;\n  } else {\n    return new Uint8Array(file);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// WebNN API currently does not have a TypeScript definition file. This file is a workaround with types generated from\n// WebNN API specification.\n// https://github.com/webmachinelearning/webnn/issues/677\n/// <reference path=\"jsep/webnn/webnn.d.ts\" />\n\nimport { Env, InferenceSession, Tensor } from 'onnxruntime-common';\n\nimport {\n  SerializableInternalBuffer,\n  SerializableSessionMetadata,\n  SerializableTensorMetadata,\n  TensorMetadata,\n} from './proxy-messages';\nimport { setRunOptions } from './run-options';\nimport { setSessionOptions } from './session-options';\nimport {\n  calculateTensorSizeInBytes,\n  dataLocationStringToEnum,\n  isGpuBufferSupportedType,\n  isMLTensorSupportedType,\n  logLevelStringToEnum,\n  tensorDataTypeEnumToString,\n  tensorDataTypeStringToEnum,\n  tensorTypeToTypedArrayConstructor,\n} from './wasm-common';\nimport { getInstance } from './wasm-factory';\nimport { allocWasmString, checkLastError } from './wasm-utils';\nimport { loadFile } from './wasm-utils-load-file';\n\n// #region Initializations\n\n/**\n * There are 4 different \"initialization\" steps for ORT. They happen in different places and different time.\n *\n * 1. JavaScript initialization for onnxruntime-common and onnxruntime-web.\n *    This is the first initialization step. In this step, onnxruntime-web calls onnxruntime-common's registerBackend()\n * function multiple times to register all the available backends. The backend registration is very fast. It only\n * registers the backend name with the uninitialized backend object. No heavy initialization is done in this step.\n *    Refer to web/lib/index.ts for the backend registration.\n *\n * 2. WebAssembly artifact initialization.\n *    This happens when any registered wasm backend is used for the first time (ie. `ort.InferenceSession.create()` is\n * called). In this step, onnxruntime-web does the followings:\n *     - create a proxy worker and make sure the proxy worker is ready to receive messages, if proxy is enabled.\n *     - perform feature detection, locate correct WebAssembly artifact path and call the Emscripten generated\n * JavaScript code to initialize the WebAssembly runtime.\n *         - if proxy is enabled, this step happens in the proxy worker using message 'init-wasm'.\n *         - downloading the 'ort-wasm{...}.wasm' file is done in this step.\n *         - if multi-thread is enabled, one or more webworker will be created to initialize the PThread threadpool.\n *\n * 3. ORT environment initialization.\n *    This happens after step 2. In this step, onnxruntime-web performs ONNX Runtime environment initialization.\n * Function `_OrtInit()` is called in this step.\n *     - if proxy is enabled, this step happens in the proxy worker using message 'init-ort'.\n *     - logging level (ort.env.logLevel) and thread number (ort.env.wasm.numThreads) are set in this step.\n *\n * 4. Session initialization.\n *    This happens when `ort.InferenceSession.create()` is called. Unlike the first 3 steps (they only called once),\n * this step will be done for each session. In this step, onnxruntime-web does the followings:\n *    If the parameter is a URL:\n *    - download the model data from the URL.\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - dereference the model buffer. This step allows the original ArrayBuffer to be garbage collected.\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *    If the parameter is a Uint8Array object:\n *    - copy the model data to the WASM heap. (proxy: 'copy-from')\n *    - call `_OrtCreateSession()` to create the session. (proxy: 'create')\n *\n *\n */\n\n/**\n * initialize ORT environment.\n *\n * @param numThreads SetGlobalIntraOpNumThreads(numThreads)\n * @param loggingLevel CreateEnv(static_cast<OrtLoggingLevel>(logging_level))\n */\nconst initOrt = (numThreads: number, loggingLevel: number): void => {\n  const errorCode = getInstance()._OrtInit(numThreads, loggingLevel);\n  if (errorCode !== 0) {\n    checkLastError(\"Can't initialize onnxruntime.\");\n  }\n};\n\n/**\n * initialize runtime environment.\n * @param env passed in the environment config object.\n */\nexport const initRuntime = async (env: Env): Promise<void> => {\n  // init ORT\n  initOrt(env.wasm.numThreads!, logLevelStringToEnum(env.logLevel));\n};\n\n/**\n * perform EP specific initialization.\n *\n * @param env\n * @param epName\n */\nexport const initEp = async (env: Env, epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\n    const initJsep = require('./jsep/init').init;\n\n    if (epName === 'webgpu') {\n      // perform WebGPU availability check\n      if (typeof navigator === 'undefined' || !navigator.gpu) {\n        throw new Error('WebGPU is not supported in current environment');\n      }\n\n      let adapter = env.webgpu.adapter as GPUAdapter | null;\n      if (!adapter) {\n        // if adapter is not set, request a new adapter.\n        const powerPreference = env.webgpu.powerPreference;\n        if (\n          powerPreference !== undefined &&\n          powerPreference !== 'low-power' &&\n          powerPreference !== 'high-performance'\n        ) {\n          throw new Error(`Invalid powerPreference setting: \"${powerPreference}\"`);\n        }\n        const forceFallbackAdapter = env.webgpu.forceFallbackAdapter;\n        if (forceFallbackAdapter !== undefined && typeof forceFallbackAdapter !== 'boolean') {\n          throw new Error(`Invalid forceFallbackAdapter setting: \"${forceFallbackAdapter}\"`);\n        }\n        adapter = await navigator.gpu.requestAdapter({ powerPreference, forceFallbackAdapter });\n        if (!adapter) {\n          throw new Error(\n            'Failed to get GPU adapter. ' +\n              'You may need to enable flag \"--enable-unsafe-webgpu\" if you are using Chrome.',\n          );\n        }\n      } else {\n        // if adapter is set, validate it.\n        if (\n          typeof adapter.limits !== 'object' ||\n          typeof adapter.features !== 'object' ||\n          typeof adapter.requestDevice !== 'function'\n        ) {\n          throw new Error('Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.');\n        }\n      }\n\n      await initJsep('webgpu', getInstance(), env, adapter);\n    }\n    if (epName === 'webnn') {\n      // perform WebNN availability check\n      if (typeof navigator === 'undefined' || !(navigator as unknown as { ml: unknown }).ml) {\n        throw new Error('WebNN is not supported in current environment');\n      }\n\n      await initJsep('webnn', getInstance(), env);\n    }\n  }\n};\n\n// #endregion Initializations\n\n/**\n * valid data locations for input/output tensors.\n */\ntype SupportedTensorDataLocationForInputOutput = 'cpu' | 'cpu-pinned' | 'gpu-buffer' | 'ml-tensor';\n\ntype IOBindingState = {\n  /**\n   * the handle of IO binding.\n   */\n  readonly handle: number;\n\n  /**\n   * the preferred location for each output tensor.\n   *\n   * value is one of 'cpu', 'cpu-pinned', 'gpu-buffer', 'ml-tensor'.\n   */\n  readonly outputPreferredLocations: readonly SupportedTensorDataLocationForInputOutput[];\n\n  /**\n   * enum value of the preferred location for each output tensor.\n   */\n  readonly outputPreferredLocationsEncoded: readonly number[];\n};\n\n/**\n *  tuple elements are: InferenceSession ID; inputNamesUTF8Encoded; outputNamesUTF8Encoded; bindingState\n */\ntype SessionMetadata = [\n  inferenceSessionId: number,\n  inputNamesUTF8Encoded: number[],\n  outputNamesUTF8Encoded: number[],\n  bindingState: IOBindingState | null,\n  enableGraphCapture: boolean,\n  inputOutputBound: boolean,\n];\n\nconst activeSessions = new Map<number, SessionMetadata>();\n\n/**\n * get the input/output count of the session.\n * @param sessionHandle the handle representing the session. should be non-zero.\n * @returns a tuple including 2 numbers, representing the input count and output count.\n */\nconst getSessionInputOutputCount = (sessionHandle: number): [number, number] => {\n  const wasm = getInstance();\n  const stack = wasm.stackSave();\n  try {\n    const ptrSize = wasm.PTR_SIZE;\n    const dataOffset = wasm.stackAlloc(2 * ptrSize);\n    const errorCode = wasm._OrtGetInputOutputCount(sessionHandle, dataOffset, dataOffset + ptrSize);\n    if (errorCode !== 0) {\n      checkLastError(\"Can't get session input/output count.\");\n    }\n    const type = ptrSize === 4 ? 'i32' : 'i64';\n    return [Number(wasm.getValue(dataOffset, type)), Number(wasm.getValue(dataOffset + ptrSize, type))];\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * allocate the memory and memcpy the external buffer.\n *\n * @param model - the external buffer containing the model data. Must not be the same buffer as the WASM heap.\n * @returns a 2-elements tuple - the pointer and size of the allocated buffer\n */\nexport const copyFromExternalBuffer = (model: Uint8Array): [number, number] => {\n  const wasm = getInstance();\n  const modelDataOffset = wasm._malloc(model.byteLength);\n  if (modelDataOffset === 0) {\n    throw new Error(`Can't create a session. failed to allocate a buffer of size ${model.byteLength}.`);\n  }\n  wasm.HEAPU8.set(model, modelDataOffset);\n  return [modelDataOffset, model.byteLength];\n};\n\n/**\n * create an inference session from a model data buffer.\n *\n * @param modelData - either a Uint8Array object representing the model data, or a 2-elements tuple containing the\n *     pointer and size of the model data buffer.\n * @param options an optional session options object.\n * @returns a 3-elements tuple containing [session handle, input names, output names]\n */\nexport const createSession = async (\n  modelData: Uint8Array | SerializableInternalBuffer,\n  options?: InferenceSession.SessionOptions,\n): Promise<SerializableSessionMetadata> => {\n  let modelDataOffset: number, modelDataLength: number;\n  const wasm = getInstance();\n\n  if (Array.isArray(modelData)) {\n    // if model data is an array, it must be a 2-elements tuple containing the pointer and size of the model data\n    [modelDataOffset, modelDataLength] = modelData;\n  } else if (modelData.buffer === wasm.HEAPU8.buffer) {\n    // if model data uses the same buffer as the WASM heap, we don't need to copy it.\n    [modelDataOffset, modelDataLength] = [modelData.byteOffset, modelData.byteLength];\n  } else {\n    // otherwise, copy the model data to the WASM heap.\n    [modelDataOffset, modelDataLength] = copyFromExternalBuffer(modelData);\n  }\n\n  let sessionHandle = 0;\n  let sessionOptionsHandle = 0;\n  let ioBindingHandle = 0;\n  let allocs: number[] = [];\n  const inputNamesUTF8Encoded = [];\n  const outputNamesUTF8Encoded = [];\n\n  try {\n    [sessionOptionsHandle, allocs] = setSessionOptions(options);\n\n    if (options?.externalData && wasm.mountExternalData) {\n      const loadingPromises = [];\n      for (const file of options.externalData) {\n        const path = typeof file === 'string' ? file : file.path;\n        loadingPromises.push(\n          loadFile(typeof file === 'string' ? file : file.data).then((data) => {\n            wasm.mountExternalData!(path, data);\n          }),\n        );\n      }\n\n      // wait for all external data files to be loaded\n      await Promise.all(loadingPromises);\n    }\n\n    for (const provider of options?.executionProviders ?? []) {\n      const providerName = typeof provider === 'string' ? provider : provider.name;\n      if (providerName === 'webnn') {\n        wasm.shouldTransferToMLTensor = false;\n        if (typeof provider !== 'string') {\n          const webnnOptions = provider as InferenceSession.WebNNExecutionProviderOption;\n          const context = (webnnOptions as InferenceSession.WebNNOptionsWithMLContext)?.context;\n          const gpuDevice = (webnnOptions as InferenceSession.WebNNOptionsWebGpu)?.gpuDevice;\n          const deviceType = (webnnOptions as InferenceSession.WebNNContextOptions)?.deviceType;\n          const powerPreference = (webnnOptions as InferenceSession.WebNNContextOptions)?.powerPreference;\n          if (context) {\n            wasm.currentContext = context as MLContext;\n          } else if (gpuDevice) {\n            wasm.currentContext = await wasm.jsepCreateMLContext!(gpuDevice);\n          } else {\n            wasm.currentContext = await wasm.jsepCreateMLContext!({ deviceType, powerPreference });\n          }\n        } else {\n          wasm.currentContext = await wasm.jsepCreateMLContext!();\n        }\n        break;\n      }\n    }\n\n    sessionHandle = await wasm._OrtCreateSession(modelDataOffset, modelDataLength, sessionOptionsHandle);\n    if (sessionHandle === 0) {\n      checkLastError(\"Can't create a session.\");\n    }\n\n    wasm.jsepOnCreateSession?.();\n\n    // clear current MLContext after session creation\n    if (wasm.currentContext) {\n      wasm.jsepRegisterMLContext!(sessionHandle, wasm.currentContext);\n      wasm.currentContext = undefined;\n      wasm.shouldTransferToMLTensor = true;\n    }\n\n    const [inputCount, outputCount] = getSessionInputOutputCount(sessionHandle);\n\n    const enableGraphCapture = !!options?.enableGraphCapture;\n\n    const inputNames = [];\n    const outputNames = [];\n    const outputPreferredLocations: SupportedTensorDataLocationForInputOutput[] = [];\n    for (let i = 0; i < inputCount; i++) {\n      const name = wasm._OrtGetInputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError(\"Can't get an input name.\");\n      }\n      inputNamesUTF8Encoded.push(name);\n      inputNames.push(wasm.UTF8ToString(name));\n    }\n    for (let i = 0; i < outputCount; i++) {\n      const name = wasm._OrtGetOutputName(sessionHandle, i);\n      if (name === 0) {\n        checkLastError(\"Can't get an output name.\");\n      }\n      outputNamesUTF8Encoded.push(name);\n      const nameString = wasm.UTF8ToString(name);\n      outputNames.push(nameString);\n\n      if (!BUILD_DEFS.DISABLE_JSEP) {\n        if (enableGraphCapture && options?.preferredOutputLocation === undefined) {\n          outputPreferredLocations.push('gpu-buffer');\n          continue;\n        }\n        const location =\n          typeof options?.preferredOutputLocation === 'string'\n            ? options.preferredOutputLocation\n            : (options?.preferredOutputLocation?.[nameString] ?? 'cpu');\n        if (location !== 'cpu' && location !== 'cpu-pinned' && location !== 'gpu-buffer' && location !== 'ml-tensor') {\n          throw new Error(`Not supported preferred output location: ${location}.`);\n        }\n        if (enableGraphCapture && location !== 'gpu-buffer') {\n          throw new Error(\n            `Not supported preferred output location: ${location}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`,\n          );\n        }\n        outputPreferredLocations.push(location);\n      }\n    }\n\n    // use IO binding only when at least one output is preferred to be on GPU.\n    let bindingState: IOBindingState | null = null;\n    if (!BUILD_DEFS.DISABLE_JSEP && outputPreferredLocations.some((l) => l === 'gpu-buffer' || l === 'ml-tensor')) {\n      ioBindingHandle = wasm._OrtCreateBinding(sessionHandle);\n      if (ioBindingHandle === 0) {\n        checkLastError(\"Can't create IO binding.\");\n      }\n\n      bindingState = {\n        handle: ioBindingHandle,\n        outputPreferredLocations,\n        outputPreferredLocationsEncoded: outputPreferredLocations.map((l) => dataLocationStringToEnum(l)),\n      };\n    }\n\n    activeSessions.set(sessionHandle, [\n      sessionHandle,\n      inputNamesUTF8Encoded,\n      outputNamesUTF8Encoded,\n      bindingState,\n      enableGraphCapture,\n      false,\n    ]);\n    return [sessionHandle, inputNames, outputNames];\n  } catch (e) {\n    inputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n    outputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n\n    if (ioBindingHandle !== 0) {\n      if (wasm._OrtReleaseBinding(ioBindingHandle) !== 0) {\n        checkLastError(\"Can't release IO binding.\");\n      }\n    }\n\n    if (sessionHandle !== 0) {\n      if (wasm._OrtReleaseSession(sessionHandle) !== 0) {\n        checkLastError(\"Can't release session.\");\n      }\n    }\n    throw e;\n  } finally {\n    wasm._free(modelDataOffset);\n    if (sessionOptionsHandle !== 0) {\n      if (wasm._OrtReleaseSessionOptions(sessionOptionsHandle) !== 0) {\n        checkLastError(\"Can't release session options.\");\n      }\n    }\n    allocs.forEach((alloc) => wasm._free(alloc));\n\n    // unmount external data if necessary\n    wasm.unmountExternalData?.();\n  }\n};\n\nexport const releaseSession = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot release session. invalid session id: ${sessionId}`);\n  }\n  const [sessionHandle, inputNamesUTF8Encoded, outputNamesUTF8Encoded, ioBindingState, enableGraphCapture] = session;\n\n  if (ioBindingState) {\n    if (enableGraphCapture) {\n      if (wasm._OrtClearBoundOutputs(ioBindingState.handle) !== 0) {\n        checkLastError(\"Can't clear bound outputs.\");\n      }\n    }\n    if (wasm._OrtReleaseBinding(ioBindingState.handle) !== 0) {\n      checkLastError(\"Can't release IO binding.\");\n    }\n  }\n\n  wasm.jsepOnReleaseSession?.(sessionId);\n\n  inputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n  outputNamesUTF8Encoded.forEach((buf) => wasm._OrtFree(buf));\n  if (wasm._OrtReleaseSession(sessionHandle) !== 0) {\n    checkLastError(\"Can't release session.\");\n  }\n  activeSessions.delete(sessionId);\n};\n\nexport const prepareInputOutputTensor = (\n  tensor: TensorMetadata | null,\n  tensorHandles: number[],\n  allocs: number[],\n  sessionId: number,\n  index: number,\n  enableGraphCapture = false,\n): void => {\n  if (!tensor) {\n    tensorHandles.push(0);\n    return;\n  }\n\n  const wasm = getInstance();\n  const ptrSize = wasm.PTR_SIZE;\n\n  const dataType = tensor[0];\n  const dims = tensor[1];\n  const location = tensor[3];\n\n  let rawData: number;\n  let dataByteLength: number;\n\n  if (dataType === 'string' && (location === 'gpu-buffer' || location === 'ml-tensor')) {\n    throw new Error('String tensor is not supported on GPU.');\n  }\n\n  if (enableGraphCapture && location !== 'gpu-buffer') {\n    throw new Error(\n      `External buffer must be provided for input/output index ${index} when enableGraphCapture is true.`,\n    );\n  }\n\n  if (location === 'gpu-buffer') {\n    const gpuBuffer = tensor[2].gpuBuffer;\n    dataByteLength = calculateTensorSizeInBytes(tensorDataTypeStringToEnum(dataType), dims)!;\n\n    const registerBuffer = wasm.jsepRegisterBuffer;\n    if (!registerBuffer) {\n      throw new Error('Tensor location \"gpu-buffer\" is not supported without using WebGPU.');\n    }\n    rawData = registerBuffer(sessionId, index, gpuBuffer, dataByteLength);\n  } else if (location === 'ml-tensor') {\n    const mlTensor = tensor[2].mlTensor as MLTensor;\n    dataByteLength = calculateTensorSizeInBytes(tensorDataTypeStringToEnum(dataType), dims)!;\n\n    const registerMLTensor = wasm.jsepRegisterMLTensor;\n    if (!registerMLTensor) {\n      throw new Error('Tensor location \"ml-tensor\" is not supported without using WebNN.');\n    }\n    rawData = registerMLTensor(mlTensor, tensorDataTypeStringToEnum(dataType), dims);\n  } else {\n    const data = tensor[2];\n\n    if (Array.isArray(data)) {\n      // string tensor\n      dataByteLength = ptrSize * data.length;\n      rawData = wasm._malloc(dataByteLength);\n      allocs.push(rawData);\n      for (let i = 0; i < data.length; i++) {\n        if (typeof data[i] !== 'string') {\n          throw new TypeError(`tensor data at index ${i} is not a string`);\n        }\n        wasm.setValue(rawData + i * ptrSize, allocWasmString(data[i], allocs), '*');\n      }\n    } else {\n      dataByteLength = data.byteLength;\n      rawData = wasm._malloc(dataByteLength);\n      allocs.push(rawData);\n      wasm.HEAPU8.set(new Uint8Array(data.buffer, data.byteOffset, dataByteLength), rawData);\n    }\n  }\n\n  const stack = wasm.stackSave();\n  const dimsOffset = wasm.stackAlloc(4 * dims.length);\n  try {\n    dims.forEach((d, index) => wasm.setValue(dimsOffset + index * ptrSize, d, ptrSize === 4 ? 'i32' : 'i64'));\n    const tensor = wasm._OrtCreateTensor(\n      tensorDataTypeStringToEnum(dataType),\n      rawData,\n      dataByteLength,\n      dimsOffset,\n      dims.length,\n      dataLocationStringToEnum(location),\n    );\n    if (tensor === 0) {\n      checkLastError(`Can't create tensor for input/output. session=${sessionId}, index=${index}.`);\n    }\n    tensorHandles.push(tensor);\n  } finally {\n    wasm.stackRestore(stack);\n  }\n};\n\n/**\n * perform inference run\n */\nexport const run = async (\n  sessionId: number,\n  inputIndices: number[],\n  inputTensors: TensorMetadata[],\n  outputIndices: number[],\n  outputTensors: Array<TensorMetadata | null>,\n  options: InferenceSession.RunOptions,\n): Promise<TensorMetadata[]> => {\n  const wasm = getInstance();\n  const ptrSize = wasm.PTR_SIZE;\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error(`cannot run inference. invalid session id: ${sessionId}`);\n  }\n  const sessionHandle = session[0];\n  const inputNamesUTF8Encoded = session[1];\n  const outputNamesUTF8Encoded = session[2];\n  const ioBindingState = session[3];\n  const enableGraphCapture = session[4];\n  const inputOutputBound = session[5];\n\n  const inputCount = inputIndices.length;\n  const outputCount = outputIndices.length;\n\n  let runOptionsHandle = 0;\n  let runOptionsAllocs: number[] = [];\n\n  const inputTensorHandles: number[] = [];\n  const outputTensorHandles: number[] = [];\n  const inputOutputAllocs: number[] = [];\n\n  const beforeRunStack = wasm.stackSave();\n  const inputValuesOffset = wasm.stackAlloc(inputCount * ptrSize);\n  const inputNamesOffset = wasm.stackAlloc(inputCount * ptrSize);\n  const outputValuesOffset = wasm.stackAlloc(outputCount * ptrSize);\n  const outputNamesOffset = wasm.stackAlloc(outputCount * ptrSize);\n\n  try {\n    // WebNN backend needs the active session to check MLTensors with the current context.\n    wasm.jsepOnRunStart?.(sessionHandle);\n\n    [runOptionsHandle, runOptionsAllocs] = setRunOptions(options);\n\n    // create input tensors\n    for (let i = 0; i < inputCount; i++) {\n      prepareInputOutputTensor(\n        inputTensors[i],\n        inputTensorHandles,\n        inputOutputAllocs,\n        sessionId,\n        inputIndices[i],\n        enableGraphCapture,\n      );\n    }\n\n    // create output tensors\n    for (let i = 0; i < outputCount; i++) {\n      prepareInputOutputTensor(\n        outputTensors[i],\n        outputTensorHandles,\n        inputOutputAllocs,\n        sessionId,\n        inputCount + outputIndices[i],\n        enableGraphCapture,\n      );\n    }\n\n    for (let i = 0; i < inputCount; i++) {\n      wasm.setValue(inputValuesOffset + i * ptrSize, inputTensorHandles[i], '*');\n      wasm.setValue(inputNamesOffset + i * ptrSize, inputNamesUTF8Encoded[inputIndices[i]], '*');\n    }\n    for (let i = 0; i < outputCount; i++) {\n      wasm.setValue(outputValuesOffset + i * ptrSize, outputTensorHandles[i], '*');\n      wasm.setValue(outputNamesOffset + i * ptrSize, outputNamesUTF8Encoded[outputIndices[i]], '*');\n    }\n\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState && !inputOutputBound) {\n      const { handle, outputPreferredLocations, outputPreferredLocationsEncoded } = ioBindingState;\n\n      if (inputNamesUTF8Encoded.length !== inputCount) {\n        throw new Error(\n          `input count from feeds (${inputCount}) is expected to be always equal to model's input count (${inputNamesUTF8Encoded.length}).`,\n        );\n      }\n\n      // process inputs\n      for (let i = 0; i < inputCount; i++) {\n        const index = inputIndices[i];\n        const errorCode = await wasm._OrtBindInput(handle, inputNamesUTF8Encoded[index], inputTensorHandles[i]);\n        if (errorCode !== 0) {\n          checkLastError(`Can't bind input[${i}] for session=${sessionId}.`);\n        }\n      }\n\n      // process pre-allocated outputs\n      for (let i = 0; i < outputCount; i++) {\n        const index = outputIndices[i];\n        const location = outputTensors[i]?.[3]; // undefined means output is not pre-allocated.\n\n        if (location) {\n          // output is pre-allocated. bind the tensor.\n          const errorCode = wasm._OrtBindOutput(handle, outputNamesUTF8Encoded[index], outputTensorHandles[i], 0);\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind pre-allocated output[${i}] for session=${sessionId}.`);\n          }\n        } else {\n          // output is not pre-allocated. reset preferred location.\n          const errorCode = wasm._OrtBindOutput(\n            handle,\n            outputNamesUTF8Encoded[index],\n            0,\n            outputPreferredLocationsEncoded[index],\n          );\n          if (errorCode !== 0) {\n            checkLastError(`Can't bind output[${i}] to ${outputPreferredLocations[i]} for session=${sessionId}.`);\n          }\n        }\n      }\n      activeSessions.set(sessionId, [\n        sessionHandle,\n        inputNamesUTF8Encoded,\n        outputNamesUTF8Encoded,\n        ioBindingState,\n        enableGraphCapture,\n        true,\n      ]);\n    }\n\n    let errorCode: number;\n    if (!BUILD_DEFS.DISABLE_JSEP && ioBindingState) {\n      errorCode = await wasm._OrtRunWithBinding(\n        sessionHandle,\n        ioBindingState.handle,\n        outputCount,\n        outputValuesOffset,\n        runOptionsHandle,\n      );\n    } else {\n      errorCode = await wasm._OrtRun(\n        sessionHandle,\n        inputNamesOffset,\n        inputValuesOffset,\n        inputCount,\n        outputNamesOffset,\n        outputCount,\n        outputValuesOffset,\n        runOptionsHandle,\n      );\n    }\n\n    if (errorCode !== 0) {\n      checkLastError('failed to call OrtRun().');\n    }\n\n    const output: TensorMetadata[] = [];\n\n    for (let i = 0; i < outputCount; i++) {\n      const tensor = Number(wasm.getValue(outputValuesOffset + i * ptrSize, '*'));\n      if (tensor === outputTensorHandles[i]) {\n        // output tensor is pre-allocated. no need to copy data.\n        output.push(outputTensors[i]!);\n        continue;\n      }\n\n      const beforeGetTensorDataStack = wasm.stackSave();\n      // stack allocate 4 pointer value\n      const tensorDataOffset = wasm.stackAlloc(4 * ptrSize);\n\n      let keepOutputTensor = false;\n      let type: Tensor.Type | undefined,\n        dataOffset = 0;\n      try {\n        const errorCode = wasm._OrtGetTensorData(\n          tensor,\n          tensorDataOffset,\n          tensorDataOffset + ptrSize,\n          tensorDataOffset + 2 * ptrSize,\n\n          tensorDataOffset + 3 * ptrSize,\n        );\n        if (errorCode !== 0) {\n          checkLastError(`Can't access output tensor data on index ${i}.`);\n        }\n        const valueType = ptrSize === 4 ? 'i32' : 'i64';\n        const dataType = Number(wasm.getValue(tensorDataOffset, valueType));\n        dataOffset = wasm.getValue(tensorDataOffset + ptrSize, '*');\n        const dimsOffset = wasm.getValue(tensorDataOffset + ptrSize * 2, '*');\n        const dimsLength = Number(wasm.getValue(tensorDataOffset + ptrSize * 3, valueType));\n        const dims = [];\n        for (let i = 0; i < dimsLength; i++) {\n          dims.push(Number(wasm.getValue(dimsOffset + i * ptrSize, valueType)));\n        }\n        if (wasm._OrtFree(dimsOffset) !== 0) {\n          checkLastError(\"Can't free memory for tensor dims.\");\n        }\n        const size = dims.reduce((a, b) => a * b, 1);\n        type = tensorDataTypeEnumToString(dataType);\n\n        const preferredLocation = ioBindingState?.outputPreferredLocations[outputIndices[i]];\n\n        if (type === 'string') {\n          if (preferredLocation === 'gpu-buffer' || preferredLocation === 'ml-tensor') {\n            throw new Error('String tensor is not supported on GPU.');\n          }\n          const stringData: string[] = [];\n          for (let i = 0; i < size; i++) {\n            const offset = wasm.getValue(dataOffset + i * ptrSize, '*');\n            const nextOffset = wasm.getValue(dataOffset + (i + 1) * ptrSize, '*');\n            const maxBytesToRead = i === size - 1 ? undefined : nextOffset - offset;\n            stringData.push(wasm.UTF8ToString(offset, maxBytesToRead));\n          }\n          output.push([type, dims, stringData, 'cpu']);\n        } else {\n          // If a certain output's preferred location is GPU but the tensor is empty, we still need to create a CPU\n          // tensor for it. There is no mapping GPU buffer for an empty tensor.\n          if (preferredLocation === 'gpu-buffer' && size > 0) {\n            const getBuffer = wasm.jsepGetBuffer;\n            if (!getBuffer) {\n              throw new Error('preferredLocation \"gpu-buffer\" is not supported without using WebGPU.');\n            }\n            const gpuBuffer = getBuffer(dataOffset);\n            const bufferSize = calculateTensorSizeInBytes(dataType, size);\n            if (bufferSize === undefined || !isGpuBufferSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type,\n              dims,\n              {\n                gpuBuffer,\n                download: wasm.jsepCreateDownloader!(gpuBuffer, bufferSize, type),\n                dispose: () => {\n                  if (wasm._OrtReleaseTensor(tensor) !== 0) {\n                    checkLastError(\"Can't release tensor.\");\n                  }\n                },\n              },\n              'gpu-buffer',\n            ]);\n          } else if (preferredLocation === 'ml-tensor' && size > 0) {\n            const ensureTensor = wasm.jsepEnsureTensor;\n            if (!ensureTensor) {\n              throw new Error('preferredLocation \"ml-tensor\" is not supported without using WebNN.');\n            }\n            const tensorSize = calculateTensorSizeInBytes(dataType, size);\n            if (tensorSize === undefined || !isMLTensorSupportedType(type)) {\n              throw new Error(`Unsupported data type: ${type}`);\n            }\n\n            // If the graph has been partitioned, the output tensor may have not been created. For this reason, we use\n            // ensureTensor to get/create the MLTensor. In which case, we don't need to copy the data if a new tensor\n            // has been created.\n            const mlTensor = await ensureTensor(dataOffset, dataType, dims, false);\n\n            // do not release the tensor right now. it will be released when user calls tensor.dispose().\n            keepOutputTensor = true;\n\n            output.push([\n              type,\n              dims,\n              {\n                mlTensor,\n                download: wasm.jsepCreateMLTensorDownloader!(dataOffset, type),\n                dispose: () => {\n                  wasm.jsepReleaseTensorId!(dataOffset);\n                  wasm._OrtReleaseTensor(tensor);\n                },\n              },\n              'ml-tensor',\n            ]);\n          } else {\n            const typedArrayConstructor = tensorTypeToTypedArrayConstructor(type);\n            const data = new typedArrayConstructor(size);\n            new Uint8Array(data.buffer, data.byteOffset, data.byteLength).set(\n              wasm.HEAPU8.subarray(dataOffset, dataOffset + data.byteLength),\n            );\n            output.push([type, dims, data, 'cpu']);\n          }\n        }\n      } finally {\n        wasm.stackRestore(beforeGetTensorDataStack);\n        if (type === 'string' && dataOffset) {\n          wasm._free(dataOffset);\n        }\n        if (!keepOutputTensor) {\n          wasm._OrtReleaseTensor(tensor);\n        }\n      }\n    }\n\n    if (ioBindingState && !enableGraphCapture) {\n      if (wasm._OrtClearBoundOutputs(ioBindingState.handle) !== 0) {\n        checkLastError(\"Can't clear bound outputs.\");\n      }\n      activeSessions.set(sessionId, [\n        sessionHandle,\n        inputNamesUTF8Encoded,\n        outputNamesUTF8Encoded,\n        ioBindingState,\n        enableGraphCapture,\n        false,\n      ]);\n    }\n    return output;\n  } finally {\n    wasm.stackRestore(beforeRunStack);\n\n    inputTensorHandles.forEach((v) => wasm._OrtReleaseTensor(v));\n    outputTensorHandles.forEach((v) => wasm._OrtReleaseTensor(v));\n    inputOutputAllocs.forEach((p) => wasm._free(p));\n\n    if (runOptionsHandle !== 0) {\n      wasm._OrtReleaseRunOptions(runOptionsHandle);\n    }\n    runOptionsAllocs.forEach((p) => wasm._free(p));\n  }\n};\n\n/**\n * end profiling\n */\nexport const endProfiling = (sessionId: number): void => {\n  const wasm = getInstance();\n  const session = activeSessions.get(sessionId);\n  if (!session) {\n    throw new Error('invalid session id');\n  }\n  const sessionHandle = session[0];\n\n  // profile file name is not used yet, but it must be freed.\n  const profileFileName = wasm._OrtEndProfiling(sessionHandle);\n  if (profileFileName === 0) {\n    checkLastError(\"Can't get an profile file name.\");\n  }\n  wasm._OrtFree(profileFileName);\n};\n\nexport const extractTransferableBuffers = (tensors: readonly SerializableTensorMetadata[]): ArrayBufferLike[] => {\n  const buffers: ArrayBufferLike[] = [];\n  for (const tensor of tensors) {\n    const data = tensor[2];\n    if (!Array.isArray(data) && 'buffer' in data) {\n      buffers.push(data.buffer);\n    }\n  }\n  return buffers;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { env, InferenceSession } from 'onnxruntime-common';\n\nimport {\n  OrtWasmMessage,\n  SerializableInternalBuffer,\n  SerializableSessionMetadata,\n  SerializableTensorMetadata,\n  TensorMetadata,\n} from './proxy-messages';\nimport * as core from './wasm-core-impl';\nimport { initializeWebAssembly } from './wasm-factory';\nimport { importProxyWorker, inferWasmPathPrefixFromScriptSrc } from './wasm-utils-import';\n\nconst isProxy = (): boolean => !!env.wasm.proxy && typeof document !== 'undefined';\nlet proxyWorker: Worker | undefined;\nlet initializing = false;\nlet initialized = false;\nlet aborted = false;\nlet temporaryObjectUrl: string | undefined;\n\ntype PromiseCallbacks<T = void> = [resolve: (result: T) => void, reject: (reason: unknown) => void];\nlet initWasmCallbacks: PromiseCallbacks;\nconst queuedCallbacks: Map<OrtWasmMessage['type'], Array<PromiseCallbacks<unknown>>> = new Map();\n\nconst enqueueCallbacks = (type: OrtWasmMessage['type'], callbacks: PromiseCallbacks<unknown>): void => {\n  const queue = queuedCallbacks.get(type);\n  if (queue) {\n    queue.push(callbacks);\n  } else {\n    queuedCallbacks.set(type, [callbacks]);\n  }\n};\n\nconst ensureWorker = (): void => {\n  if (initializing || !initialized || aborted || !proxyWorker) {\n    throw new Error('worker not ready');\n  }\n};\n\nconst onProxyWorkerMessage = (ev: MessageEvent<OrtWasmMessage>): void => {\n  switch (ev.data.type) {\n    case 'init-wasm':\n      initializing = false;\n      if (ev.data.err) {\n        aborted = true;\n        initWasmCallbacks[1](ev.data.err);\n      } else {\n        initialized = true;\n        initWasmCallbacks[0]();\n      }\n      if (temporaryObjectUrl) {\n        URL.revokeObjectURL(temporaryObjectUrl);\n        temporaryObjectUrl = undefined;\n      }\n      break;\n    case 'init-ep':\n    case 'copy-from':\n    case 'create':\n    case 'release':\n    case 'run':\n    case 'end-profiling': {\n      const callbacks = queuedCallbacks.get(ev.data.type)!;\n      if (ev.data.err) {\n        callbacks.shift()![1](ev.data.err);\n      } else {\n        callbacks.shift()![0](ev.data.out!);\n      }\n      break;\n    }\n    default:\n  }\n};\n\nexport const initializeWebAssemblyAndOrtRuntime = async (): Promise<void> => {\n  if (initialized) {\n    return;\n  }\n  if (initializing) {\n    throw new Error(\"multiple calls to 'initWasm()' detected.\");\n  }\n  if (aborted) {\n    throw new Error(\"previous call to 'initWasm()' failed.\");\n  }\n\n  initializing = true;\n\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    return new Promise<void>((resolve, reject) => {\n      proxyWorker?.terminate();\n\n      void importProxyWorker().then(([objectUrl, worker]) => {\n        try {\n          proxyWorker = worker;\n          proxyWorker.onerror = (ev: ErrorEvent) => reject(ev);\n          proxyWorker.onmessage = onProxyWorkerMessage;\n          initWasmCallbacks = [resolve, reject];\n          const message: OrtWasmMessage = { type: 'init-wasm', in: env };\n\n          // if the proxy worker is loaded from a blob URL, we need to make sure the path information is not lost.\n          //\n          // when `env.wasm.wasmPaths` is not set, we need to pass the path information to the worker.\n          //\n          if (!BUILD_DEFS.ENABLE_BUNDLE_WASM_JS && !message.in!.wasm.wasmPaths && objectUrl) {\n            // for a build not bundled the wasm JS, we need to pass the path prefix to the worker.\n            // the path prefix will be used to resolve the path to both the wasm JS and the wasm file.\n            const inferredWasmPathPrefix = inferWasmPathPrefixFromScriptSrc();\n            if (inferredWasmPathPrefix) {\n              message.in!.wasm.wasmPaths = inferredWasmPathPrefix;\n            }\n          }\n\n          if (\n            BUILD_DEFS.IS_ESM &&\n            BUILD_DEFS.ENABLE_BUNDLE_WASM_JS &&\n            !message.in!.wasm.wasmPaths &&\n            (objectUrl || BUILD_DEFS.ESM_IMPORT_META_URL?.startsWith('file:'))\n          ) {\n            // for a build bundled the wasm JS, if either of the following conditions is met:\n            // - the proxy worker is loaded from a blob URL\n            // - `import.meta.url` is a file URL, it means it is overwriten by the bundler.\n            //\n            // in either case, the path information is lost, we need to pass the path of the .wasm file to the worker.\n            // we need to use the bundler preferred URL format:\n            // new URL('filename', import.meta.url)\n            // so that the bundler can handle the file using corresponding loaders.\n            message.in!.wasm.wasmPaths = {\n              wasm: !BUILD_DEFS.DISABLE_JSEP\n                ? new URL('ort-wasm-simd-threaded.jsep.wasm', BUILD_DEFS.ESM_IMPORT_META_URL).href\n                : new URL('ort-wasm-simd-threaded.wasm', BUILD_DEFS.ESM_IMPORT_META_URL).href,\n            };\n          }\n          proxyWorker.postMessage(message);\n          temporaryObjectUrl = objectUrl;\n        } catch (e) {\n          reject(e);\n        }\n      }, reject);\n    });\n  } else {\n    try {\n      await initializeWebAssembly(env.wasm);\n      await core.initRuntime(env);\n      initialized = true;\n    } catch (e) {\n      aborted = true;\n      throw e;\n    } finally {\n      initializing = false;\n    }\n  }\n};\n\nexport const initializeOrtEp = async (epName: string): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('init-ep', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'init-ep', in: { epName, env } };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    await core.initEp(env, epName);\n  }\n};\n\nexport const copyFromExternalBuffer = async (buffer: Uint8Array): Promise<SerializableInternalBuffer> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<SerializableInternalBuffer>((resolve, reject) => {\n      enqueueCallbacks('copy-from', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'copy-from', in: { buffer } };\n      proxyWorker!.postMessage(message, [buffer.buffer]);\n    });\n  } else {\n    return core.copyFromExternalBuffer(buffer);\n  }\n};\n\nexport const createSession = async (\n  model: SerializableInternalBuffer | Uint8Array,\n  options?: InferenceSession.SessionOptions,\n): Promise<SerializableSessionMetadata> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check unsupported options\n    if (options?.preferredOutputLocation) {\n      throw new Error('session option \"preferredOutputLocation\" is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableSessionMetadata>((resolve, reject) => {\n      enqueueCallbacks('create', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'create', in: { model, options: { ...options } } };\n      const transferable: Transferable[] = [];\n      if (model instanceof Uint8Array) {\n        transferable.push(model.buffer);\n      }\n      proxyWorker!.postMessage(message, transferable);\n    });\n  } else {\n    return core.createSession(model, options);\n  }\n};\n\nexport const releaseSession = async (sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('release', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'release', in: sessionId };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.releaseSession(sessionId);\n  }\n};\n\nexport const run = async (\n  sessionId: number,\n  inputIndices: number[],\n  inputs: TensorMetadata[],\n  outputIndices: number[],\n  outputs: Array<TensorMetadata | null>,\n  options: InferenceSession.RunOptions,\n): Promise<TensorMetadata[]> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    // check inputs location\n    if (inputs.some((t) => t[3] !== 'cpu')) {\n      throw new Error('input tensor on GPU is not supported for proxy.');\n    }\n    // check outputs location\n    if (outputs.some((t) => t)) {\n      throw new Error('pre-allocated output tensor is not supported for proxy.');\n    }\n    ensureWorker();\n    return new Promise<SerializableTensorMetadata[]>((resolve, reject) => {\n      enqueueCallbacks('run', [resolve, reject]);\n      const serializableInputs = inputs as SerializableTensorMetadata[]; // every input is on CPU.\n      const message: OrtWasmMessage = {\n        type: 'run',\n        in: { sessionId, inputIndices, inputs: serializableInputs, outputIndices, options },\n      };\n      proxyWorker!.postMessage(message, core.extractTransferableBuffers(serializableInputs));\n    });\n  } else {\n    return core.run(sessionId, inputIndices, inputs, outputIndices, outputs, options);\n  }\n};\n\nexport const endProfiling = async (sessionId: number): Promise<void> => {\n  if (!BUILD_DEFS.DISABLE_WASM_PROXY && isProxy()) {\n    ensureWorker();\n    return new Promise<void>((resolve, reject) => {\n      enqueueCallbacks('end-profiling', [resolve, reject]);\n      const message: OrtWasmMessage = { type: 'end-profiling', in: sessionId };\n      proxyWorker!.postMessage(message);\n    });\n  } else {\n    core.endProfiling(sessionId);\n  }\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport {\n  InferenceSession,\n  InferenceSessionHandler,\n  SessionHandler,\n  Tensor,\n  TRACE_FUNC_BEGIN,\n  TRACE_FUNC_END,\n} from 'onnxruntime-common';\n\nimport { SerializableInternalBuffer, TensorMetadata } from './proxy-messages';\nimport { copyFromExternalBuffer, createSession, endProfiling, releaseSession, run } from './proxy-wrapper';\nimport { isGpuBufferSupportedType, isMLTensorSupportedType } from './wasm-common';\nimport { isNode } from './wasm-utils-env';\nimport { loadFile } from './wasm-utils-load-file';\n\nexport const encodeTensorMetadata = (tensor: Tensor, getName: () => string): TensorMetadata => {\n  switch (tensor.location) {\n    case 'cpu':\n      return [tensor.type, tensor.dims, tensor.data, 'cpu'];\n    case 'gpu-buffer':\n      return [tensor.type, tensor.dims, { gpuBuffer: tensor.gpuBuffer }, 'gpu-buffer'];\n    case 'ml-tensor':\n      return [tensor.type, tensor.dims, { mlTensor: tensor.mlTensor }, 'ml-tensor'];\n    default:\n      throw new Error(`invalid data location: ${tensor.location} for ${getName()}`);\n  }\n};\n\nexport const decodeTensorMetadata = (tensor: TensorMetadata): Tensor => {\n  switch (tensor[3]) {\n    case 'cpu':\n      return new Tensor(tensor[0], tensor[2], tensor[1]);\n    case 'gpu-buffer': {\n      const dataType = tensor[0];\n      if (!isGpuBufferSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing GPU tensor`);\n      }\n      const { gpuBuffer, download, dispose } = tensor[2];\n      return Tensor.fromGpuBuffer(gpuBuffer, { dataType, dims: tensor[1], download, dispose });\n    }\n    case 'ml-tensor': {\n      const dataType = tensor[0];\n      if (!isMLTensorSupportedType(dataType)) {\n        throw new Error(`not supported data type: ${dataType} for deserializing MLTensor tensor`);\n      }\n      const { mlTensor, download, dispose } = tensor[2];\n      return Tensor.fromMLTensor(mlTensor, { dataType, dims: tensor[1], download, dispose });\n    }\n    default:\n      throw new Error(`invalid data location: ${tensor[3]}`);\n  }\n};\n\nexport class OnnxruntimeWebAssemblySessionHandler implements InferenceSessionHandler {\n  private sessionId: number;\n\n  inputNames: string[];\n  outputNames: string[];\n\n  async fetchModelAndCopyToWasmMemory(path: string): Promise<SerializableInternalBuffer> {\n    // fetch model from url and move to wasm heap.\n    return copyFromExternalBuffer(await loadFile(path));\n  }\n\n  async loadModel(pathOrBuffer: string | Uint8Array, options?: InferenceSession.SessionOptions): Promise<void> {\n    TRACE_FUNC_BEGIN();\n    let model: Parameters<typeof createSession>[0];\n\n    if (typeof pathOrBuffer === 'string') {\n      if (isNode) {\n        // node\n        model = await loadFile(pathOrBuffer);\n      } else {\n        // browser\n        // fetch model and copy to wasm heap.\n        model = await this.fetchModelAndCopyToWasmMemory(pathOrBuffer);\n      }\n    } else {\n      model = pathOrBuffer;\n    }\n\n    [this.sessionId, this.inputNames, this.outputNames] = await createSession(model, options);\n    TRACE_FUNC_END();\n  }\n\n  async dispose(): Promise<void> {\n    return releaseSession(this.sessionId);\n  }\n\n  async run(\n    feeds: SessionHandler.FeedsType,\n    fetches: SessionHandler.FetchesType,\n    options: InferenceSession.RunOptions,\n  ): Promise<SessionHandler.ReturnType> {\n    TRACE_FUNC_BEGIN();\n    const inputArray: Tensor[] = [];\n    const inputIndices: number[] = [];\n    Object.entries(feeds).forEach((kvp) => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.inputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid input '${name}'`);\n      }\n      inputArray.push(tensor);\n      inputIndices.push(index);\n    });\n\n    const outputArray: Array<Tensor | null> = [];\n    const outputIndices: number[] = [];\n    Object.entries(fetches).forEach((kvp) => {\n      const name = kvp[0];\n      const tensor = kvp[1];\n      const index = this.outputNames.indexOf(name);\n      if (index === -1) {\n        throw new Error(`invalid output '${name}'`);\n      }\n      outputArray.push(tensor);\n      outputIndices.push(index);\n    });\n\n    const inputs = inputArray.map((t, i) =>\n      encodeTensorMetadata(t, () => `input \"${this.inputNames[inputIndices[i]]}\"`),\n    );\n    const outputs = outputArray.map((t, i) =>\n      t ? encodeTensorMetadata(t, () => `output \"${this.outputNames[outputIndices[i]]}\"`) : null,\n    );\n\n    const results = await run(this.sessionId, inputIndices, inputs, outputIndices, outputs, options);\n\n    const resultMap: SessionHandler.ReturnType = {};\n    for (let i = 0; i < results.length; i++) {\n      resultMap[this.outputNames[outputIndices[i]]] = outputArray[i] ?? decodeTensorMetadata(results[i]);\n    }\n    TRACE_FUNC_END();\n    return resultMap;\n  }\n\n  startProfiling(): void {\n    // TODO: implement profiling\n  }\n\n  endProfiling(): void {\n    void endProfiling(this.sessionId);\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nimport { Backend, env, InferenceSession, InferenceSessionHandler } from 'onnxruntime-common';\n\nimport { initializeOrtEp, initializeWebAssemblyAndOrtRuntime } from './wasm/proxy-wrapper';\nimport { OnnxruntimeWebAssemblySessionHandler } from './wasm/session-handler-inference';\n\n/**\n * This function initializes all flags for WebAssembly.\n *\n * Those flags are accessible from `ort.env.wasm`. Users are allow to set those flags before the first inference session\n * being created, to override default value.\n */\nexport const initializeFlags = (): void => {\n  if (typeof env.wasm.initTimeout !== 'number' || env.wasm.initTimeout < 0) {\n    env.wasm.initTimeout = 0;\n  }\n\n  if (env.wasm.simd === false) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Deprecated property \"env.wasm.simd\" is set to false. ' +\n        'non-SIMD build is no longer provided, and this setting will be ignored.',\n    );\n  }\n\n  if (typeof env.wasm.proxy !== 'boolean') {\n    env.wasm.proxy = false;\n  }\n\n  if (typeof env.wasm.trace !== 'boolean') {\n    env.wasm.trace = false;\n  }\n\n  if (typeof env.wasm.numThreads !== 'number' || !Number.isInteger(env.wasm.numThreads) || env.wasm.numThreads <= 0) {\n    // The following logic only applies when `ort.env.wasm.numThreads` is not set by user. We will always honor user's\n    // setting if it is provided.\n\n    // Browser: when crossOriginIsolated is false, SharedArrayBuffer is not available so WebAssembly threads will not\n    // work. In this case, we will set numThreads to 1.\n    //\n    // There is an exception: when the browser is configured to force-enable SharedArrayBuffer (e.g. Chromuim with\n    // --enable-features=SharedArrayBuffer), it is possible that `self.crossOriginIsolated` is false and\n    // SharedArrayBuffer is available at the same time. This is usually for testing. In this case,  we will still set\n    // numThreads to 1 here. If we want to enable multi-threading in test, we should set `ort.env.wasm.numThreads` to a\n    // value greater than 1.\n    if (typeof self !== 'undefined' && !self.crossOriginIsolated) {\n      env.wasm.numThreads = 1;\n    } else {\n      const numCpuLogicalCores =\n        typeof navigator === 'undefined' ? require('node:os').cpus().length : navigator.hardwareConcurrency;\n      env.wasm.numThreads = Math.min(4, Math.ceil((numCpuLogicalCores || 1) / 2));\n    }\n  }\n};\n\nexport class OnnxruntimeWebAssemblyBackend implements Backend {\n  /**\n   * This function initializes the WebAssembly backend.\n   *\n   * This function will be called only once for each backend name. It will be called the first time when\n   * `ort.InferenceSession.create()` is called with a registered backend name.\n   *\n   * @param backendName - the registered backend name.\n   */\n  async init(backendName: string): Promise<void> {\n    // populate wasm flags\n    initializeFlags();\n\n    // init wasm\n    await initializeWebAssemblyAndOrtRuntime();\n\n    // performe EP specific initialization\n    await initializeOrtEp(backendName);\n  }\n  createInferenceSessionHandler(\n    path: string,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n  createInferenceSessionHandler(\n    buffer: Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler>;\n  async createInferenceSessionHandler(\n    pathOrBuffer: string | Uint8Array,\n    options?: InferenceSession.SessionOptions,\n  ): Promise<InferenceSessionHandler> {\n    const handler = new OnnxruntimeWebAssemblySessionHandler();\n    await handler.loadModel(pathOrBuffer, options);\n    return Promise.resolve(handler);\n  }\n}\n\nexport const wasmBackend = new OnnxruntimeWebAssemblyBackend();\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n/* eslint-disable @typescript-eslint/no-var-requires, @typescript-eslint/no-require-imports */\n\n// We use \"require\" instead of \"import\" here because import statement must be put in top level. Our current code does\n// not allow bundler to tree-shaking code as expected because some codes are treated as having side effects.\n// So we import code inside the if-clause to allow bundler remove the code safely.\n\nexport * from 'onnxruntime-common';\nimport * as ort from 'onnxruntime-common';\nexport default ort;\n\nimport { registerBackend, env } from 'onnxruntime-common';\nimport { version } from './version';\n\nif (!BUILD_DEFS.DISABLE_WEBGL) {\n  const onnxjsBackend = require('./backend-onnxjs').onnxjsBackend;\n  registerBackend('webgl', onnxjsBackend, -10);\n}\n\nif (!BUILD_DEFS.DISABLE_WASM) {\n  const wasmBackend = require('./backend-wasm').wasmBackend;\n  if (!BUILD_DEFS.DISABLE_JSEP) {\n    registerBackend('webgpu', wasmBackend, 5);\n    registerBackend('webnn', wasmBackend, 5);\n  }\n  registerBackend('cpu', wasmBackend, 10);\n  registerBackend('wasm', wasmBackend, 10);\n}\n\nObject.defineProperty(env.versions, 'web', { value: version, enumerable: true });\n","// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\n// This file is generated by /js/scripts/update-version.ts\n// Do not modify file content manually.\n\nexport const version = '1.21.0-dev.20250206-d981b153d3';\n"],"names":["isNode","init_wasm_utils_env","__esmMin","origin","getScriptSrc","scriptSrc","inferWasmPathPrefixFromScriptSrc","isSameOrigin","normalizeUrl","fallbackUrl","preload","dynamicImportDefault","embeddedWasmModule","importWasmModule","init_wasm_utils_import","filename","prefixOverride","baseUrl","absoluteUrl","blob","url","urlOverride","isMultiThreaded","wasmModuleFilename","wasmModuleUrl","needPreload","wasm","initialized","initializing","aborted","isMultiThreadSupported","isSimdSupported","initializeWebAssembly","getInstance","init_wasm_factory","flags","timeout","numThreads","multiThreadSupported","wasmPaths","wasmPrefixOverride","mjsPathOverrideFlag","mjsPathOverride","wasmPathOverrideFlag","wasmPathOverride","wasmBinaryOverride","objectUrl","ortWasmFactory","isTimeout","tasks","resolve","reject","config","fileName","inferredWasmPathPrefix","module","what","allocWasmString","iterateExtraOptions","checkLastError","init_wasm_utils","data","allocs","dataLength","dataOffset","options","prefix","seen","handler","key","value","name","message","stack","ptrSize","paramsOffset","errorCode","errorMessagePointer","errorMessage","setRunOptions","init_run_options","runOptionsHandle","runOptions","tagDataOffset","keyDataOffset","valueDataOffset","e","alloc","getGraphOptimzationLevel","getExecutionMode","appendDefaultOptions","setExecutionProviders","setSessionOptions","init_session_options","graphOptimizationLevel","executionMode","session","ep","sessionOptionsHandle","executionProviders","epName","deviceType","webgpuOptions","epNameDataOffset","sessionOptions","logIdDataOffset","logSeverityLevel","logVerbosityLevel","optimizedModelFilePathOffset","nameOffset","tensorDataTypeStringToEnum","tensorDataTypeEnumToString","calculateTensorSizeInBytes","tensorTypeToTypedArrayConstructor","logLevelStringToEnum","isGpuBufferSupportedType","isMLTensorSupportedType","dataLocationStringToEnum","init_wasm_common","type","typeProto","dateType","dimsOrSize","elementSize","size","a","b","logLevel","location","loadFile","init_wasm_utils_load_file","file","readFile","createReadStream","stream","chunks","chunk","response","contentLengthHeader","fileSize","reader","buffer","pages","offset","done","chunkSize","initOrt","initRuntime","initEp","activeSessions","getSessionInputOutputCount","copyFromExternalBuffer","createSession","releaseSession","prepareInputOutputTensor","run","endProfiling","init_wasm_core_impl","loggingLevel","env","sessionHandle","model","modelDataOffset","modelData","modelDataLength","ioBindingHandle","inputNamesUTF8Encoded","outputNamesUTF8Encoded","loadingPromises","path","provider","webnnOptions","context","gpuDevice","powerPreference","inputCount","outputCount","enableGraphCapture","inputNames","outputNames","outputPreferredLocations","i","nameString","bindingState","buf","sessionId","ioBindingState","tensor","tensorHandles","index","dataType","dims","rawData","dataByteLength","gpuBuffer","registerBuffer","mlTensor","registerMLTensor","dimsOffset","d","inputIndices","inputTensors","outputIndices","outputTensors","inputOutputBound","runOptionsAllocs","inputTensorHandles","outputTensorHandles","inputOutputAllocs","beforeRunStack","inputValuesOffset","inputNamesOffset","outputValuesOffset","outputNamesOffset","output","beforeGetTensorDataStack","tensorDataOffset","keepOutputTensor","valueType","dimsLength","preferredLocation","stringData","nextOffset","maxBytesToRead","getBuffer","bufferSize","ensureTensor","typedArrayConstructor","v","p","profileFileName","initializeWebAssemblyAndOrtRuntime","initializeOrtEp","init_proxy_wrapper","inputs","outputs","Tensor","TRACE_FUNC_BEGIN","TRACE_FUNC_END","encodeTensorMetadata","decodeTensorMetadata","OnnxruntimeWebAssemblySessionHandler","init_session_handler_inference","getName","download","dispose","pathOrBuffer","feeds","fetches","inputArray","kvp","outputArray","t","results","resultMap","backend_wasm_exports","__export","OnnxruntimeWebAssemblyBackend","initializeFlags","wasmBackend","init_backend_wasm","numCpuLogicalCores","backendName","ort","registerBackend","version","lib_default"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"debugId":null}}]
}